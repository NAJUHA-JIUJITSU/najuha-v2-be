{
  "openapi": "3.0.1",
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local Server"
    }
  ],
  "info": {
    "version": "0.0.1",
    "title": "najuha-v2-be",
    "description": "",
    "license": {
      "name": "UNLICENSED"
    }
  },
  "paths": {
    "/api-conventions/auth-guard": {
      "get": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "x-nestia-encrypted": false
          },
          "4000": {
            "description": "AUTH_ACCESS_TOKEN_MISSING",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_ACCESS_TOKEN_MISSING"
                }
              }
            }
          },
          "4001": {
            "description": "AUTH_ACCESS_TOKEN_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_ACCESS_TOKEN_UNAUTHORIZED"
                }
              }
            }
          },
          "4003": {
            "description": "AUTH_LEVEL_FORBIDDEN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_LEVEL_FORBIDDEN"
                }
              }
            }
          }
        },
        "summary": "1 auth guard",
        "description": "1 auth guard.\n- Role Based Access Control (RBAC) 에 따라 권한이 없을 때 에러\n\nUserRoleLevel: PUBLIC, TEMPORARY_USER, USER, ADMIN\n- PUBLIC: accessToken 없이 호출 가능\n- TEMPORARY_USER: 회원가입이 완료되지 않은 사용료\n- USER: 회원가입이 완료된 사용자\n- ADMIN: 관리자",
        "x-nestia-namespace": "api-conventions.auth-guard.auth",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/api-conventions/user-api-vs-admin-api": {
      "get": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "x-nestia-encrypted": false
          }
        },
        "summary": "2 user api vs admin api",
        "description": "2 user api vs admin api.\n\nuser api 비회원,사용자, 대회사 등이 사용하는 api 입니다.\n- endpoint: /user/*\n- RoleLevel: PUBLIC, TEMPORARY_USER, USER\n\nadmin api 관리자가 사용하는 api 입니다.\n- endpoint: /admin/*\n- RoleLevel: ADMIN",
        "x-nestia-namespace": "api-conventions.user-api-vs-admin-api.userApiVsAdminApi",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/api-conventions/find-vs-get": {
      "get": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "x-nestia-encrypted": false
          }
        },
        "summary": "3 find vs get",
        "description": "3 find vs get.\n- find: 조회 대상이 존재하지 않을 때 null 혹은 빈 배열을 반환\n- get: 조회 대상이 존재하지 않을 때 에러 발생",
        "x-nestia-namespace": "api-conventions.find-vs-get.findVsGet",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/api-conventions/update": {
      "get": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "x-nestia-encrypted": false
          }
        },
        "summary": "4 update",
        "description": "4 update.\n- 업데이트 하려는 대상이 존재하지 않을 때 에러 발생",
        "x-nestia-namespace": "api-conventions.update.update",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/auth/sns-login": {
      "post": {
        "tags": [
          "u-1 auth"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnsAuthDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "accessToken and refreshToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormAuthTokensDto"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "5000": {
            "description": "SNS_AUTH_NOT_SUPPORTED_SNS_PROVIDER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNS_AUTH_NOT_SUPPORTED_SNS_PROVIDER"
                }
              }
            }
          },
          "5001": {
            "description": "SNS_AUTH_KAKAO_LOGIN_FAIL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNS_AUTH_KAKAO_LOGIN_FAIL"
                }
              }
            }
          },
          "5002": {
            "description": "SNS_AUTH_NAVER_LOGIN_FAIL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNS_AUTH_NAVER_LOGIN_FAIL"
                }
              }
            }
          },
          "5003": {
            "description": "SNS_AUTH_GOOGLE_LOGIN_FAIL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNS_AUTH_GOOGLE_LOGIN_FAIL"
                }
              }
            }
          }
        },
        "summary": "u-1-1 auth sns login",
        "description": "u-1-1 auth sns login.\n- RoleLevel: PUBLIC",
        "x-nestia-namespace": "user.auth.sns-login.snsLogin",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-1 auth",
                "kind": "text"
              }
            ]
          },
          {
            "name": "return",
            "text": [
              {
                "text": "accessToken and refreshToken",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/auth/token": {
      "post": {
        "tags": [
          "u-1 auth"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "accessToken and refreshToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormAuthTokensDto"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "4002": {
            "description": "AUTH_REFRESH_TOKEN_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_REFRESH_TOKEN_UNAUTHORIZED"
                }
              }
            }
          }
        },
        "summary": "u-1-2 auth toekn refresh",
        "description": "u-1-2 auth toekn refresh.\n- RoleLevel: PUBLIC",
        "x-nestia-namespace": "user.auth.token.refreshToken",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-1 auth",
                "kind": "text"
              }
            ]
          },
          {
            "name": "return",
            "text": [
              {
                "text": "accessToken and refreshToken",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/users": {
      "post": {
        "tags": [
          "u-3 users"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "created user info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUserEntity"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-3-1 create user",
        "description": "u-3-1 create user. // TODO: api 삭제 예정(유저 생성은 내부적으로만 사용))\n- RoleLevel: USER",
        "x-nestia-namespace": "user.users.postUser",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-3 users",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "created user info",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "patch": {
        "tags": [
          "u-3 users"
        ],
        "parameters": [],
        "requestBody": {
          "description": "UpdateUserDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialPickUserEntitynamegenderbirthnicknamebelt"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUserEntity"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-3-2 update user",
        "description": "u-3-2 update user.\n- RoleLevel: USER",
        "x-nestia-namespace": "user.users.patchUser",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-3 users",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "dto",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "UpdateUserDto",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "updated user",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/user/users/me": {
      "get": {
        "tags": [
          "u-3 users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUserEntity"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-3-3 get me",
        "description": "u-3-3 get me.\n- RoleLevel: USER",
        "x-nestia-namespace": "user.users.me.getMe",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-3 users",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "user",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/register/users/me": {
      "get": {
        "tags": [
          "u-2 register"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUserEntity"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-2-1 get temporary user",
        "description": "u-2-1 get temporary user.\n- RoleLevel: TEMPORARY_USER",
        "x-nestia-namespace": "user.register.users.me.getTemporaryUser",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-2 register",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "user",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/register/users/{nickname}/is-duplicated": {
      "get": {
        "tags": [
          "u-2 register"
        ],
        "parameters": [
          {
            "name": "nickname",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormboolean"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-2-2 check duplicated nickname",
        "description": "u-2-2 check duplicated nickname.\n- RoleLevel: TEMPORARY_USER\n- 닉네임이 중복되면 true, 중복되지 않으면 false를 반환\n- 본인이 사용중인 닉네임이면 false를 반환\n- 이미 사용중인 닉네임이면 true를 반환",
        "x-nestia-namespace": "user.register.users.is-duplicated.checkDuplicateNickname",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-2 register",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "user",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/register": {
      "patch": {
        "tags": [
          "u-2 register"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialPickUserEntitygenderbirthnicknamebelt"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "accessToken & refreshToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormAuthTokensDto"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "6000": {
            "description": "REGISTER_NICKNAME_DUPLICATED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/REGISTER_NICKNAME_DUPLICATED"
                }
              }
            }
          },
          "6001": {
            "description": "USERS_USER_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/USERS_USER_NOT_FOUND"
                }
              }
            }
          }
        },
        "summary": "u-2-3 register user",
        "description": "u-2-3 register user.\n- RoleLevel: TEMPORARY_USER\n- 유저 정보를 업데이트하고, USER 레벨로 업데이트한다.\n- USER 레벨로 업데이트된 accessToken, refreshToken을 반환한다.",
        "x-nestia-namespace": "user.register.registerUser",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-2 register",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "accessToken & refreshToken",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/user/policy": {
      "get": {
        "tags": [
          "u-4 policy"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "recent policies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormArrayPolicyEntity"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-4-1 find all types of policies\n- RoleLevel: USER",
        "description": "u-4-1 find all types of policies\n- RoleLevel: USER.\n- 가장 최근에 등록된 모든 타입의 약관을 가져옵니다.",
        "x-nestia-namespace": "user.policy.findAllTypesOfPolicies",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "recent policies",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/policy/{id}": {
      "get": {
        "tags": [
          "u-4 policy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "description": "policy id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "policy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormPolicyEntitynull"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-4-2 find policy\n- RoleLevel: USER",
        "description": "u-4-2 find policy\n- RoleLevel: USER.\n- 약관 ID로 약관을 가져옵니다.",
        "x-nestia-namespace": "user.policy.findPolicy",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "id",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "policy id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "policy",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/admin/policy": {
      "post": {
        "tags": [
          "a-4 policy"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "created policy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormPolicyEntity"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "description": "a-4-1 create policy\n- RoleLevel: ADMIN",
        "x-nestia-namespace": "admin.policy.postPolicy",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "created policy",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "get": {
        "tags": [
          "a-4 policy"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "all policies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormArrayPolicyEntity"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-4-2 find all policies",
        "description": "a-4-2 find all policies.\n- RoleLevel: ADMIN",
        "x-nestia-namespace": "admin.policy.findAllPolicies",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "all policies",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/admin/policy/{id}": {
      "get": {
        "tags": [
          "a-4 policy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "description": "policy id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "one policy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormPolicyEntitynull"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-4-3 find policy",
        "description": "a-4-3 find policy.\n- RoleLevel: ADMIN",
        "x-nestia-namespace": "admin.policy.findPolicy",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "id",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "policy id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "one policy",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      },
      "patch": {
        "tags": [
          "a-4 policy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "description": "policy id",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialPickPolicyEntitytypetitlecontent"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "updated policy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormPolicyEntity"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-4-4 patch policy",
        "description": "a-4-4 patch policy.\n- RoleLevel: ADMIN",
        "x-nestia-namespace": "admin.policy.patchPolicy",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "id",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "policy id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "updated policy",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    }
  },
  "components": {
    "schemas": {
      "AUTH_ACCESS_TOKEN_MISSING": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              4000
            ]
          },
          "data": {
            "type": "string",
            "enum": [
              "accssToken이 없습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "result",
          "status",
          "code",
          "data"
        ],
        "description": "----------------------------------------------------------------------------\nAuth 4000 ~ 4999"
      },
      "AUTH_ACCESS_TOKEN_UNAUTHORIZED": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              401
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              4001
            ]
          },
          "data": {
            "type": "string",
            "enum": [
              "유효하지 않은 accessToken 입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "result",
          "status",
          "code",
          "data"
        ]
      },
      "AUTH_LEVEL_FORBIDDEN": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              403
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              4003
            ]
          },
          "data": {
            "type": "string",
            "enum": [
              "권한이 없습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "result",
          "status",
          "code",
          "data"
        ]
      },
      "SnsAuthDto": {
        "type": "object",
        "properties": {
          "snsAuthProvider": {
            "type": "string",
            "enum": [
              "KAKAO",
              "NAVER",
              "GOOGLE",
              "APPLE"
            ],
            "description": "snsProvider."
          },
          "snsAuthCode": {
            "type": "string",
            "description": "authCode."
          }
        },
        "nullable": false,
        "required": [
          "snsAuthProvider",
          "snsAuthCode"
        ]
      },
      "SNS_AUTH_NOT_SUPPORTED_SNS_PROVIDER": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              5000
            ]
          },
          "data": {
            "type": "string",
            "enum": [
              "지원하지 않는 SNS AUTH PROVIDER 입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "result",
          "status",
          "code",
          "data"
        ],
        "description": "----------------------------------------------------------------------------\nSnsAuth 5000 ~ 5999"
      },
      "SNS_AUTH_KAKAO_LOGIN_FAIL": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              5001
            ]
          },
          "data": {
            "type": "string",
            "enum": [
              "카카오 로그인에 실패했습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "result",
          "status",
          "code",
          "data"
        ]
      },
      "SNS_AUTH_NAVER_LOGIN_FAIL": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              5002
            ]
          },
          "data": {
            "type": "string",
            "enum": [
              "네이버 로그인에 실패했습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "result",
          "status",
          "code",
          "data"
        ]
      },
      "SNS_AUTH_GOOGLE_LOGIN_FAIL": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              5003
            ]
          },
          "data": {
            "type": "string",
            "enum": [
              "구글 로그인에 실패했습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "result",
          "status",
          "code",
          "data"
        ]
      },
      "ResponseFormAuthTokensDto": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1000
            ]
          },
          "data": {
            "$ref": "#/components/schemas/AuthTokensDto"
          }
        },
        "nullable": false,
        "required": [
          "result",
          "code",
          "data"
        ]
      },
      "AuthTokensDto": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "accessToken",
          "refreshToken"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "refreshToken"
        ]
      },
      "AUTH_REFRESH_TOKEN_UNAUTHORIZED": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              401
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              4002
            ]
          },
          "data": {
            "type": "string",
            "enum": [
              "유효하지 않은 refreshToken 입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "result",
          "status",
          "code",
          "data"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "snsId": {
            "type": "string",
            "description": "- SNS ID. 소셜 로그인을 위한 고유 식별자입니다."
          },
          "snsAuthProvider": {
            "type": "string",
            "enum": [
              "KAKAO",
              "NAVER",
              "GOOGLE",
              "APPLE"
            ],
            "description": "- SNS 공급자. 사용자가 로그인하는데 사용한 SNS 플랫폼을 나타냅니다."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]*$",
            "nullable": true,
            "description": "- 사용자 이름. (컬럼길이는 256으로 설정하였으나, 입력값 유효성검사는 64자 이내로 설정하도록 합니다.)"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 320,
            "minLength": 1,
            "description": "- 사용자 이메일 주소 (일단 필요없으나 수집이 쉽고, 추후에 필요할수도 있으니 일단 넣어둠)."
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true,
            "description": "- 사용자 전화번호. 국제전화번호 E.164 규격을 따릅니다. ex) +821012345678."
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE"
            ],
            "nullable": true,
            "description": "- 사용자 성별."
          },
          "birth": {
            "type": "string",
            "pattern": "^\\d{8}$",
            "nullable": true,
            "description": "- 사용자 생년월일 (YYYYMMDD)."
          }
        },
        "nullable": false,
        "required": [
          "snsId",
          "snsAuthProvider",
          "name",
          "email",
          "phoneNumber",
          "gender",
          "birth"
        ]
      },
      "ResponseFormUserEntity": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1000
            ]
          },
          "data": {
            "$ref": "#/components/schemas/UserEntity"
          }
        },
        "nullable": false,
        "required": [
          "result",
          "code",
          "data"
        ]
      },
      "UserEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "- 사용자 ID. 데이터베이스에서 자동 생성됩니다."
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "USER",
              "TEMPORARY_USER"
            ],
            "description": "- 사용자 역할. 사용자의 접근 권한을 나타냅니다."
          },
          "snsAuthProvider": {
            "type": "string",
            "enum": [
              "KAKAO",
              "NAVER",
              "GOOGLE",
              "APPLE"
            ],
            "description": "- SNS 공급자. 사용자가 로그인하는데 사용한 SNS 플랫폼을 나타냅니다."
          },
          "snsId": {
            "type": "string",
            "description": "- SNS ID. 소셜 로그인을 위한 고유 식별자입니다."
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 320,
            "minLength": 1,
            "description": "- 사용자 이메일 주소 (일단 필요없으나 수집이 쉽고, 추후에 필요할수도 있으니 일단 넣어둠)."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]*$",
            "nullable": true,
            "description": "- 사용자 이름. (컬럼길이는 256으로 설정하였으나, 입력값 유효성검사는 64자 이내로 설정하도록 합니다.)"
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true,
            "description": "- 사용자 전화번호. 국제전화번호 E.164 규격을 따릅니다. ex) +821012345678."
          },
          "nickname": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]*$",
            "nullable": true,
            "description": "- 사용자 별명. (영문, 한글, 숫자만 입력 가능합니다.)"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE"
            ],
            "nullable": true,
            "description": "- 사용자 성별."
          },
          "birth": {
            "type": "string",
            "pattern": "^\\d{8}$",
            "nullable": true,
            "description": "- 사용자 생년월일 (YYYYMMDD)."
          },
          "belt": {
            "type": "string",
            "enum": [
              "선택없음",
              "화이트",
              "블루",
              "퍼플",
              "브라운",
              "블랙"
            ],
            "nullable": true,
            "description": "- 사용자 주짓수 벨트."
          },
          "weight": {
            "type": "number",
            "nullable": true,
            "description": "- 사용자 체중."
          },
          "profileImageUrlKey": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "nullable": true,
            "description": "- 사용자 프로필 이미지 키. (썸네일 이미지 역할).\n- 참고 s3 image key 최대길이 (https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html)."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "description": "- 사용자 상태. 활성, 비활성 등을 나타냅니다."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "- 생성 시간. 데이터베이스에 엔티티가 처음 저장될 때 자동으로 설정됩니다."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "- 최종 업데이트 시간. 엔티티가 수정될 때마다 자동으로 업데이트됩니다."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "role",
          "snsAuthProvider",
          "snsId",
          "email",
          "name",
          "phoneNumber",
          "nickname",
          "gender",
          "birth",
          "belt",
          "weight",
          "profileImageUrlKey",
          "status",
          "createdAt",
          "updatedAt"
        ],
        "description": "- 각 snsAuthProvider 마다 제공되는 정보.\n- kakao  : snsId, email, name, phoneNumber, gender, birthday, birthyear.\n- naver  : snsId, email, name, phoneNumber, gender, birthday, birthyear.\n- google : snsId, email, name.\n- apple  : snsId, email, name."
      },
      "PartialPickUserEntitynamegenderbirthnicknamebelt": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]*$",
            "nullable": true,
            "description": "- 사용자 이름. (컬럼길이는 256으로 설정하였으나, 입력값 유효성검사는 64자 이내로 설정하도록 합니다.)"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE"
            ],
            "nullable": true,
            "description": "- 사용자 성별."
          },
          "birth": {
            "type": "string",
            "pattern": "^\\d{8}$",
            "nullable": true,
            "description": "- 사용자 생년월일 (YYYYMMDD)."
          },
          "nickname": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]*$",
            "nullable": true,
            "description": "- 사용자 별명. (영문, 한글, 숫자만 입력 가능합니다.)"
          },
          "belt": {
            "type": "string",
            "enum": [
              "선택없음",
              "화이트",
              "블루",
              "퍼플",
              "브라운",
              "블랙"
            ],
            "nullable": true,
            "description": "- 사용자 주짓수 벨트."
          }
        },
        "nullable": false,
        "description": "Make all properties in T optional"
      },
      "ResponseFormboolean": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1000
            ]
          },
          "data": {
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "result",
          "code",
          "data"
        ]
      },
      "PartialPickUserEntitygenderbirthnicknamebelt": {
        "type": "object",
        "properties": {
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE"
            ],
            "nullable": true,
            "description": "- 사용자 성별."
          },
          "birth": {
            "type": "string",
            "pattern": "^\\d{8}$",
            "nullable": true,
            "description": "- 사용자 생년월일 (YYYYMMDD)."
          },
          "nickname": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]*$",
            "nullable": true,
            "description": "- 사용자 별명. (영문, 한글, 숫자만 입력 가능합니다.)"
          },
          "belt": {
            "type": "string",
            "enum": [
              "선택없음",
              "화이트",
              "블루",
              "퍼플",
              "브라운",
              "블랙"
            ],
            "nullable": true,
            "description": "- 사용자 주짓수 벨트."
          }
        },
        "nullable": false,
        "description": "Make all properties in T optional"
      },
      "REGISTER_NICKNAME_DUPLICATED": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              409
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              6000
            ]
          },
          "data": {
            "type": "string",
            "enum": [
              "이미 사용중인 닉네임입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "result",
          "status",
          "code",
          "data"
        ],
        "description": "----------------------------------------------------------------------------\nRegister 6000 ~ 6999"
      },
      "USERS_USER_NOT_FOUND": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              404
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              6001
            ]
          },
          "data": {
            "type": "string",
            "enum": [
              "존재하지 않는 유저입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "result",
          "status",
          "code",
          "data"
        ],
        "description": "----------------------------------------------------------------------------\nUsers 7000 ~ 7999"
      },
      "ResponseFormArrayPolicyEntity": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1000
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyEntity"
            }
          }
        },
        "nullable": false,
        "required": [
          "result",
          "code",
          "data"
        ]
      },
      "PolicyEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "- 약관 ID. 데이터베이스에서 자동 생성됩니다."
          },
          "type": {
            "type": "string",
            "enum": [
              "TERMS_OF_SERVICE",
              "PRIVACY_POLICY",
              "REFUND_POLICY"
            ],
            "description": "- 약관의 종류.\n- TERMS_OF_SERVICE: 서비스 이용 약관.\n- PRIVACY_POLICY: 개인정보 처리 방침.\n- REFUND_POLICY: 환불 정책."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "- 약관의 제목. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "// TODO: html 혹은 markdown 형식으로 저장할지 고민중\n- 약관의 내용. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "type",
          "title",
          "content",
          "createdAt"
        ],
        "description": "- 약관 테이블.\n- 서비스 이용 약관, 개인정보 처리 방침, 환불 정책 등을 저장합니다."
      },
      "ResponseFormPolicyEntitynull": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1000
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PolicyEntity.Nullable"
          }
        },
        "nullable": false,
        "required": [
          "result",
          "code",
          "data"
        ]
      },
      "PolicyEntity.Nullable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "- 약관 ID. 데이터베이스에서 자동 생성됩니다."
          },
          "type": {
            "type": "string",
            "enum": [
              "TERMS_OF_SERVICE",
              "PRIVACY_POLICY",
              "REFUND_POLICY"
            ],
            "description": "- 약관의 종류.\n- TERMS_OF_SERVICE: 서비스 이용 약관.\n- PRIVACY_POLICY: 개인정보 처리 방침.\n- REFUND_POLICY: 환불 정책."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "- 약관의 제목. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "// TODO: html 혹은 markdown 형식으로 저장할지 고민중\n- 약관의 내용. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "nullable": true,
        "required": [
          "id",
          "type",
          "title",
          "content",
          "createdAt"
        ],
        "description": "- 약관 테이블.\n- 서비스 이용 약관, 개인정보 처리 방침, 환불 정책 등을 저장합니다."
      },
      "CreatePolicyDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TERMS_OF_SERVICE",
              "PRIVACY_POLICY",
              "REFUND_POLICY"
            ],
            "description": "- 약관의 종류.\n- TERMS_OF_SERVICE: 서비스 이용 약관.\n- PRIVACY_POLICY: 개인정보 처리 방침.\n- REFUND_POLICY: 환불 정책."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "- 약관의 제목. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "// TODO: html 혹은 markdown 형식으로 저장할지 고민중\n- 약관의 내용. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          }
        },
        "nullable": false,
        "required": [
          "type",
          "title",
          "content"
        ]
      },
      "ResponseFormPolicyEntity": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1000
            ]
          },
          "data": {
            "$ref": "#/components/schemas/PolicyEntity"
          }
        },
        "nullable": false,
        "required": [
          "result",
          "code",
          "data"
        ]
      },
      "PartialPickPolicyEntitytypetitlecontent": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TERMS_OF_SERVICE",
              "PRIVACY_POLICY",
              "REFUND_POLICY"
            ],
            "description": "- 약관의 종류.\n- TERMS_OF_SERVICE: 서비스 이용 약관.\n- PRIVACY_POLICY: 개인정보 처리 방침.\n- REFUND_POLICY: 환불 정책."
          },
          "title": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "description": "- 약관의 제목. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "// TODO: html 혹은 markdown 형식으로 저장할지 고민중\n- 약관의 내용. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          }
        },
        "nullable": false,
        "description": "Make all properties in T optional"
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}