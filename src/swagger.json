{
  "openapi": "3.0.1",
  "servers": [
    {
      "url": "http://localhost:3001",
      "description": "Local Server"
    }
  ],
  "info": {
    "version": "0.0.1",
    "title": "najuha-v2-be",
    "description": "",
    "license": {
      "name": "UNLICENSED"
    }
  },
  "paths": {
    "/api-conventions/auth-guard": {
      "get": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "x-nestia-encrypted": false
          },
          "1000": {
            "description": "AUTH_ACCESS_TOKEN_MISSING",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_ACCESS_TOKEN_MISSING"
                }
              }
            }
          },
          "1001": {
            "description": "AUTH_ACCESS_TOKEN_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_ACCESS_TOKEN_UNAUTHORIZED"
                }
              }
            }
          },
          "1003": {
            "description": "AUTH_LEVEL_FORBIDDEN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_LEVEL_FORBIDDEN"
                }
              }
            }
          }
        },
        "summary": "1 auth guard",
        "description": "1 auth guard.\n- Role Based Access Control (RBAC) 에 따라 권한이 없을 때 에러\n\nUserRoleLevel: PUBLIC, TEMPORARY_USER, USER, ADMIN\n- PUBLIC: accessToken 없이 호출 가능\n- TEMPORARY_USER: 회원가입이 완료되지 않은 사용료\n- USER: 회원가입이 완료된 사용자\n- ADMIN: 관리자",
        "x-nestia-namespace": "api-conventions.auth-guard.auth",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/api-conventions/user-api-vs-admin-api": {
      "get": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "x-nestia-encrypted": false
          }
        },
        "summary": "2 user api vs admin api",
        "description": "2 user api vs admin api.\n\nuser api 비회원,사용자, 대회사 등이 사용하는 api 입니다.\n- endpoint: /user/*\n- RoleLevel: PUBLIC, TEMPORARY_USER, USER\n\nadmin api 관리자가 사용하는 api 입니다.\n- endpoint: /admin/*\n- RoleLevel: ADMIN",
        "x-nestia-namespace": "api-conventions.user-api-vs-admin-api.userApiVsAdminApi",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/api-conventions/find-vs-get": {
      "get": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "x-nestia-encrypted": false
          }
        },
        "summary": "3 find vs get",
        "description": "3 find vs get.\n- find: 조회 대상이 존재하지 않을 때 null 혹은 빈 배열을 반환\n- get: 조회 대상이 존재하지 않을 때 에러 발생",
        "x-nestia-namespace": "api-conventions.find-vs-get.findVsGet",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/api-conventions/update": {
      "get": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "x-nestia-encrypted": false
          }
        },
        "summary": "4 update",
        "description": "4 update.\n- 업데이트 하려는 대상이 존재하지 않을 때 에러 발생",
        "x-nestia-namespace": "api-conventions.update.update",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/api-conventions/create-admin-access-token": {
      "post": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAdminAccessTokenRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "5 createAdminAccessToken",
        "description": "5 createAdminAccessToken.\n- 관리자용 accessToken 생성",
        "x-nestia-namespace": "api-conventions.create-admin-access-token.createAdminAccessToken",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/api-conventions/all-error-types": {
      "get": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllErrorTypes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "6 allErroryTypes",
        "description": "6 allErroryTypes.",
        "x-nestia-namespace": "api-conventions.all-error-types.allErroryTypes",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/auth/sns-login": {
      "post": {
        "tags": [
          "u-1 auth"
        ],
        "parameters": [],
        "requestBody": {
          "description": "SnsLoginReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnsLoginReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "SnsLoginRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormSnsLoginRes"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "2000": {
            "description": "SNS_AUTH_NOT_SUPPORTED_SNS_PROVIDER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNS_AUTH_NOT_SUPPORTED_SNS_PROVIDER"
                }
              }
            }
          },
          "2001": {
            "description": "SNS_AUTH_KAKAO_LOGIN_FAIL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNS_AUTH_KAKAO_LOGIN_FAIL"
                }
              }
            }
          },
          "2002": {
            "description": "SNS_AUTH_NAVER_LOGIN_FAIL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNS_AUTH_NAVER_LOGIN_FAIL"
                }
              }
            }
          },
          "2003": {
            "description": "SNS_AUTH_GOOGLE_LOGIN_FAIL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNS_AUTH_GOOGLE_LOGIN_FAIL"
                }
              }
            }
          }
        },
        "summary": "u-1-1 snsLogin",
        "description": "u-1-1 snsLogin.\n- RoleLevel: PUBLIC",
        "x-nestia-namespace": "user.auth.sns-login.snsLogin",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-1 auth",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "SnsLoginReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "return",
            "text": [
              {
                "text": "SnsLoginRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/auth/token": {
      "post": {
        "tags": [
          "u-1 auth"
        ],
        "parameters": [],
        "requestBody": {
          "description": "RefreshTokenReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "RefreshTokenRet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormRefreshTokenRet"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "1002": {
            "description": "AUTH_REFRESH_TOKEN_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_REFRESH_TOKEN_UNAUTHORIZED"
                }
              }
            }
          }
        },
        "summary": "u-1-2 refreshToken",
        "description": "u-1-2 refreshToken.\n- RoleLevel: PUBLIC",
        "x-nestia-namespace": "user.auth.token.refreshToken",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-1 auth",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "RefreshTokenReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "return",
            "text": [
              {
                "text": "RefreshTokenRet",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/auth/acquire-admin-role": {
      "patch": {
        "tags": [
          "u-1 auth"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "AcquireAdminRoleRet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormAcquireAdminRoleRet"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "404": {
            "description": "ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ENTITY_NOT_FOUND"
                }
              }
            }
          },
          "1004": {
            "description": "AUTH_UNREGISTERED_ADMIN_CREDENTIALS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_UNREGISTERED_ADMIN_CREDENTIALS"
                }
              }
            }
          }
        },
        "summary": "u-1-3 aqureAdminRole",
        "description": "u-1-3 aqureAdminRole.\n- RoleLevel: USER\n- 관리자로 등록되어있는 유저를 관리자 역할로 변경합니다.\n- ADMIN 역할을 가진 accessToken 과 refreshToken 을 발급합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.auth.acquire-admin-role.aqureAdminRole",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-1 auth",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "return",
            "text": [
              {
                "text": "AcquireAdminRoleRet",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/user/register/users/me": {
      "get": {
        "tags": [
          "u-2 register"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "GetTemporaryUserRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormGetTemporaryUserRes"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "404": {
            "description": "ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ENTITY_NOT_FOUND"
                }
              }
            }
          }
        },
        "summary": "u-2-1 getTemporaryUser",
        "description": "u-2-1 getTemporaryUser.\n- RoleLevel: TEMPORARY_USER.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.register.users.me.getTemporaryUser",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-2 register",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "GetTemporaryUserRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/register/users/{nickname}/is-duplicated": {
      "get": {
        "tags": [
          "u-2 register"
        ],
        "parameters": [
          {
            "name": "nickname",
            "in": "path",
            "schema": {
              "type": "string",
              "maxLength": 64,
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$"
            },
            "description": "닉네임",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "IsDuplicatedNicknameRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormIsDuplicatedNicknameRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-2-2 isDuplicateNickname",
        "description": "u-2-2 isDuplicateNickname.\n- RoleLevel: TEMPORARY_USER.\n- 닉네임이 중복되면 true, 중복되지 않으면 false를 반환.\n- 본인이 사용중인 닉네임이면 false를 반환.\n- 이미 사용중인 닉네임이면 true를 반환.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.register.users.is-duplicated.isDuplicateNickname",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-2 register",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "nickname",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "닉네임",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "IsDuplicatedNicknameRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/register/phone-number/auth-code": {
      "post": {
        "tags": [
          "u-2 register"
        ],
        "parameters": [],
        "requestBody": {
          "description": "SendPhoneNumberAuthCodeReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendPhoneNumberAuthCodeReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "SendPhoneNumberAuthCodeRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormSendPhoneNumberAuthCodeRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-2-3 sendPhoneNumberAuthCode",
        "description": "u-2-3 sendPhoneNumberAuthCode.\n- RoleLevel: TEMPORARY_USER.\n- 전화번호로 인증코드를 전송한다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.register.phone-number.auth-code.sendPhoneNumberAuthCode",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-2 register",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "SendPhoneNumberAuthCodeReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "SendPhoneNumberAuthCodeRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/register/phone-number/auth-code/confirm": {
      "post": {
        "tags": [
          "u-2 register"
        ],
        "parameters": [],
        "requestBody": {
          "description": "ConfirmAuthCodeReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmAuthCodeReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "ConfirmAuthCodeRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormConfirmAuthCodeRes"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "404": {
            "description": "ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ENTITY_NOT_FOUND"
                }
              }
            }
          }
        },
        "summary": "u-2-4 confirmAuthCode",
        "description": "u-2-4 confirmAuthCode.\n- RoleLevel: TEMPORARY_USER.\n- 전화번호로 전송된 인증코드를 확인한다.\n- 인증성공시 User의 phoneNumber를 업데이트한다.\n- 인증성공시 true, 실패시 false를 반환한다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.register.phone-number.auth-code.confirm.confirmAuthCode",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-2 register",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "ConfirmAuthCodeReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "ConfirmAuthCodeRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/register": {
      "patch": {
        "tags": [
          "u-2 register"
        ],
        "parameters": [],
        "requestBody": {
          "description": "RegisterUserReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "RegisterUserRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormRegisterUserRes"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "404": {
            "description": "ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ENTITY_NOT_FOUND"
                }
              }
            }
          },
          "3000": {
            "description": "REGISTER_NICKNAME_DUPLICATED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/REGISTER_NICKNAME_DUPLICATED"
                }
              }
            }
          },
          "3002": {
            "description": "REGISTER_POLICY_CONSENT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/REGISTER_POLICY_CONSENT_REQUIRED"
                }
              }
            }
          },
          "3003": {
            "description": "REGISTER_PHONE_NUMBER_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/REGISTER_PHONE_NUMBER_REQUIRED"
                }
              }
            }
          }
        },
        "summary": "u-2-5 registerUser",
        "description": "u-2-5 registerUser.\n- RoleLevel: TEMPORARY_USER.\n- 유저 정보를 업데이트하고, USER 레벨로 업데이트한다.\n- USER 레벨로 업데이트된 accessToken, refreshToken을 반환한다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.register.registerUser",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-2 register",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "RegisterUserReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "RegisterUserRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/user/users": {
      "post": {
        "tags": [
          "u-3 users"
        ],
        "parameters": [],
        "requestBody": {
          "description": "CreateUserReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreateUserRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateUserRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-3-1 createUser",
        "description": "u-3-1 createUser. // todo!: api 삭제 예정(유저 생성은 내부적으로만 사용)).\n- RoleLevel: USER.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.users.createUser",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-3 users",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreateUserReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreateUserRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "patch": {
        "tags": [
          "u-3 users"
        ],
        "parameters": [],
        "requestBody": {
          "description": "UpdateUserReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "UpdateUserRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUpdateUserRes"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "404": {
            "description": "ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ENTITY_NOT_FOUND"
                }
              }
            }
          }
        },
        "summary": "u-3-2 updateUser",
        "description": "u-3-2 updateUser.\n- RoleLevel: USER.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.users.updateUser",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-3 users",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "UpdateUserReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "UpdateUserRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/user/users/me": {
      "get": {
        "tags": [
          "u-3 users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "GetMeRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormGetMeRes"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "404": {
            "description": "ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ENTITY_NOT_FOUND"
                }
              }
            }
          }
        },
        "summary": "u-3-3 getMe",
        "description": "u-3-3 getMe.\n- RoleLevel: USER.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.users.me.getMe",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-3 users",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "GetMeRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/policies/latest": {
      "get": {
        "tags": [
          "u-4 policy"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "FindAllTypesOfLatestPoliciesRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindAllTypesOfLatestPoliciesRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-4-1 findAllTypesOfLatestPolicies",
        "description": "u-4-1 findAllTypesOfLatestPolicies.\n- RoleLevel: PUBLIC.\n- 가장 최근에 등록된 모든 타입의 약관을 가져옵니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.policies.latest.findAllTypesOfLatestPolicies",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "FindAllTypesOfLatestPoliciesRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/policies/{policyId}": {
      "get": {
        "tags": [
          "u-4 policy"
        ],
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "policyId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetPolicyRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormGetPolicyRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-4-2 getPolicy",
        "description": "u-4-2 getPolicy.\n- RoleLevel: PUBLIC.\n- policyId에 해당하는 약관을 조회합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.policies.getPolicy",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "policyId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "policyId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "GetPolicyRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/admin/policies": {
      "post": {
        "tags": [
          "a-4 policy"
        ],
        "parameters": [],
        "requestBody": {
          "description": "CreatePolicyReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreatePolicyRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreatePolicyRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-4-1 createPolicy",
        "description": "a-4-1 createPolicy.\n- RoleLevel: ADMIN.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.policies.createPolicy",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreatePolicyReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreatePolicyRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "get": {
        "tags": [
          "a-4 policy"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindPoliciesReqQuery"
            },
            "description": "FindPoliciesReqQuery",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "FindPoliciesRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindPoliciesRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-4-1 findPolicies",
        "description": "a-4-1 findPolicies.\n- RoleLevel: ADMIN.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.policies.findPolicies",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "query",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "FindPoliciesReqQuery",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "FindPoliciesRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/competitions": {
      "get": {
        "tags": [
          "u-5 competitions"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindCompetitionsReqQuery"
            },
            "description": "FindCompetitionsReqQuery",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "FindCompetitionsRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindCompetitionsRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-5-1 findCompetitions",
        "description": "u-5-1 findCompetitions.\n- RoleLevel: PUBLIC_OR_USER.\n- ACTIVE 상태인 competition 들을 조회합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.competitions.findCompetitions",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "query",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "FindCompetitionsReqQuery",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "FindCompetitionsRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/competitions/{competitionId}": {
      "get": {
        "tags": [
          "u-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "competitionId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetCompetitionRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormGetCompetitionRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-5-2 getCompetition",
        "description": "u-5-2 getCompetition.\n- RoleLevel: PUBLIC_OR_USER.\n- ACTIVE 상태인 competition 을 조회합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.competitions.getCompetition",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "competitionId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "GetCompetitionRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/admin/competitions": {
      "post": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [],
        "requestBody": {
          "description": "CreateCompetitionReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompetitionReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreateCompetitionRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateCompetitionRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-1 createCompetition",
        "description": "a-5-1 createCompetition.\n- RoleLevel: ADMIN.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.competitions.createCompetition",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreateCompetitionReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreateCompetitionRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "get": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindCompetitionsReqQuery"
            },
            "description": "FindCompetitionsReqQuery",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "FindCompetitionsRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindCompetitionsRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-2 findCompetitions",
        "description": "a-5-2 findCompetitions.\n- RoleLevel: ADMIN.\n- ACTIVE, INACTIVE 상태인 competition 들을 조회합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.competitions.findCompetitions",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "query",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "FindCompetitionsReqQuery",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "FindCompetitionsRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/admin/competitions/{competitionId}": {
      "get": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "competitionId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetCompetitionRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormGetCompetitionRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-3 getCompetition",
        "description": "a-5-3 getCompetition.\n- RoleLevel: ADMIN.\n- ACTIVE, INACTIVE 상태인 competition 을 조회합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.competitions.getCompetition",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "competitionId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "GetCompetitionRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      },
      "patch": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "competitionId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "UpdateCompetitionReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompetitionReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "UpdateCompetitionRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUpdateCompetitionRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-4 updateCompetition",
        "description": "a-5-4 updateCompetition.\n- RoleLevel: ADMIN.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.competitions.updateCompetition",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "competitionId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "UpdateCompetitionReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "UpdateCompetitionRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/admin/competitions/{competitionId}/status": {
      "patch": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "competitionId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "UpdateCompetitionStatusReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompetitionStatusReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "UpdateCompetitionRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUpdateCompetitionRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-5 updateCompetitionStatus",
        "description": "a-5-5 updateCompetitionStatus.\n- RoleLevel: ADMIN.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.competitions.status.updateCompetitionStatus",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "competitionId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "UpdateCompetitionStatusReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "UpdateCompetitionRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/admin/competitions/{competitionId}/divisions": {
      "post": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "competitionId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "CreateDivisionsReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDivisionsReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreateCompetitionDivisionsRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateCompetitionDivisionsRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-6 createCompetitionDivisions",
        "description": "a-5-6 createCompetitionDivisions.\n- RoleLevel: ADMIN.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.competitions.divisions.createCompetitionDivisions",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "competitionId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreateDivisionsReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreateCompetitionDivisionsRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/admin/competitions/{competitionId}/earlybird-discount-snapshots": {
      "post": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "competitionId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "CreateEarlybirdDiscountSnapshotReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEarlybirdDiscountSnapshotReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreateEarlybirdDiscountSnapshotRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateEarlybirdDiscountSnapshotRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-7 createCompetitionEarlybirdDiscountSnapshot",
        "description": "a-5-7 createCompetitionEarlybirdDiscountSnapshot.\n- RoleLevel: ADMIN.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.competitions.earlybird-discount-snapshots.createCompetitionEarlybirdDiscountSnapshot",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "competitionId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreateEarlybirdDiscountSnapshotReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreateEarlybirdDiscountSnapshotRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/admin/competitions/{competitionId}/combination-discount-snapshots": {
      "post": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "competitionId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "CreateCombinationDiscountSnapshotReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCombinationDiscountSnapshotReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreateCombinationDiscountSnapshotRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateCombinationDiscountSnapshotRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-8 createCombinationDiscountSnapshot",
        "description": "a-5-8 createCombinationDiscountSnapshot.\n- RoleLevel: ADMIN.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.competitions.combination-discount-snapshots.createCombinationDiscountSnapshot",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "competitionId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreateCombinationDiscountSnapshotReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreateCombinationDiscountSnapshotRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/admin/competitions/{competitionId}/required-additional-infos": {
      "post": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "competitionId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "CreateCompetitionRequiredAdditionalInfoReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompetitionRequiredAdditionalInfoReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreateCompetitionRequiredAdditionalInfoRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateCompetitionRequiredAdditionalInfoRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-9 createCompetitionRequiredAdditionalInfo",
        "description": "a-5-9 createCompetitionRequiredAdditionalInfo.\n- RoleLevel: ADMIN.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.competitions.required-additional-infos.createCompetitionRequiredAdditionalInfo",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "competitionId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreateCompetitionRequiredAdditionalInfoReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreateCompetitionRequiredAdditionalInfoRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/admin/competitions/{competitionId}/required-additional-infos/{requiredAdditionalInfoId}": {
      "patch": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "competitionId",
            "required": true
          },
          {
            "name": "requiredAdditionalInfoId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "requiredAdditionalInfoId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "UpdateRequiredAdditionalInfoReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRequiredAdditionalInfoReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "UpdateCompetitionRequiredAdditionalInfoRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUpdateCompetitionRequiredAdditionalInfoRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-10 updateRequiredAdditionalInfo",
        "description": "a-5-10 updateRequiredAdditionalInfo.\n- RoleLevel: ADMIN.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.competitions.required-additional-infos.updateRequiredAdditionalInfo",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "competitionId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "requiredAdditionalInfoId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "requiredAdditionalInfoId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "UpdateRequiredAdditionalInfoReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "UpdateCompetitionRequiredAdditionalInfoRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      },
      "delete": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "competitionId",
            "required": true
          },
          {
            "name": "requiredAdditionalInfoId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "requiredAdditionalInfoId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "DeleteCompetitionRequiredAdditionalInfoRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormDeleteCompetitionRequiredAdditionalInfoRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-11 deleteRequiredAdditionalInfo",
        "description": "a-5-11 deleteRequiredAdditionalInfo.\n- RoleLevel: ADMIN.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.competitions.required-additional-infos.deleteRequiredAdditionalInfo",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "competitionId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "requiredAdditionalInfoId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "requiredAdditionalInfoId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "DeleteCompetitionRequiredAdditionalInfoRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "DELETE"
      }
    },
    "/admin/competitions/{competitionId}/poster-image": {
      "post": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "competitionId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "CreateCompetitionPosterImageReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompetitionPosterImageReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreateCompetitionPosterImageRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateCompetitionPosterImageRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-12 createCompetitionPosterImage",
        "description": "a-5-12 createCompetitionPosterImage.\n- RoleLevel: ADMIN.\n- 대회 포스터 이미지를 생성 및 업데이트합니다.\n- 이미지가 존재할 경우, 기존 이미지는 soft delete 처리되고 새로운 이미지가 생성됩니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.competitions.poster-image.createCompetitionPosterImage",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "competitionId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreateCompetitionPosterImageReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreateCompetitionPosterImageRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "delete": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "competitionId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-13 deleteCompetitionPosterImage",
        "description": "a-5-13 deleteCompetitionPosterImage.\n- RoleLevel: ADMIN.\n- 대회 포스터 이미지를 삭제합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "admin.competitions.poster-image.deleteCompetitionPosterImage",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "competitionId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "DELETE"
      }
    },
    "/host/competitions": {
      "get": {
        "tags": [
          "h-5 competitions"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindCompetitionsReqQuery"
            },
            "description": "FindCompetitionsReqQuery",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "FindCompetitionsRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindCompetitionsRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "h-5-1 findCompetitions",
        "description": "h-5-1 findCompetitions.\n- RoleLevel: HOST.\n- api 호출자가 주최한 대회를 조회합니다.\n- ACTIVE, INACTIVE 상태인 competition 들을 조회합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "host.competitions.findCompetitions",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "h-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "query",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "FindCompetitionsReqQuery",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "FindCompetitionsRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/host/competitions/{competitionId}": {
      "get": {
        "tags": [
          "h-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "competitionId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetCompetitionRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormGetCompetitionRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "h-5-2 getCompetition",
        "description": "h-5-2 getCompetition.\n- RoleLevel: HOST.\n- api 호출자가 주최한 대회를 조회합니다.\n- ACTIVE, INACTIVE 상태인 competition을 조회합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "host.competitions.getCompetition",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "h-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "competitionId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "GetCompetitionRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/applications": {
      "post": {
        "tags": [
          "u-6 applications"
        ],
        "parameters": [],
        "requestBody": {
          "description": "CreateApplicationReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreateApplicationRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateApplicationRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-6-1 createApplication",
        "description": "u-6-1 createApplication.\n- RoleLevel: USER.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.applications.createApplication",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-6 applications",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreateApplicationReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreateApplicationRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "get": {
        "tags": [
          "u-6 applications"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindApplicationsQuery"
            },
            "description": "FindApplicationsQuery",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "FindApplicationsRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindApplicationsRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-6-7 findApplications",
        "description": "u-6-7 findApplications.\n- RoleLevel: USER.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.applications.findApplications",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-6 applications",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "query",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "FindApplicationsQuery",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "FindApplicationsRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/applications/{applicationId}": {
      "get": {
        "tags": [
          "u-6 applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "applicationId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetApplicationRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormGetApplicationRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-6-2 getApplication",
        "description": "u-6-2 getApplication.\n- RoleLevel: USER.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.applications.getApplication",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-6 applications",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "applicationId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "applicationId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "GetApplicationRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      },
      "delete": {
        "tags": [
          "u-6 applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "applicationId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-6-5 deleteApplication (아직구현 안됨)",
        "description": "u-6-5 deleteApplication (아직구현 안됨).\n- RoleLevel: USER.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.applications.deleteApplication",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-6 applications",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "applicationId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "applicationId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "DELETE"
      }
    },
    "/user/applications/{applicationId}/ready": {
      "patch": {
        "tags": [
          "u-6 applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "applicationId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "UpdateReadyApplicationReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReadyApplicationReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "UpdateReadyApplicationRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUpdateReadyApplicationRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-6-3 updateReadyApplication",
        "description": "u-6-3 updateReadyApplication.\n- RoleLevel: USER.\n- READY(결제전) application 을 업데이트 합니다.\n- 기존 application을 DELETED 상태로 변경하고 새로운 application 을 생성합니다.\n(이유, 기존 application이 실제로는 결제 됐지만 서버 오류로 실패처리 된 경우, 기존 결제 정보가 남아있어야하기 때문).",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.applications.ready.updateReadyApplication",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-6 applications",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "applicationId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "applicationId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "UpdateReadyApplicationReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "UpdateReadyApplicationRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/user/applications/{applicationId}/done": {
      "patch": {
        "tags": [
          "u-6 applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "applicationId",
            "required": true
          }
        ],
        "requestBody": {
          "description": "UpdateDoneApplicationReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDoneApplicationReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "UpdateDoneApplicationRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUpdateDoneApplicationRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-6-4 updateDoneApplication",
        "description": "u-6-4 updateDoneApplication.\n- RoleLevel: USER.\n- DONE(결제완료) application 을 업데이트 합니다.\n- playerSnapshotUpdateDto, participationDivisionInfoUpdateDtos 중 하나는 필수로 전달해야 합니다.\n- playerSnapshotUpdateDto 를 전달하면 playerSnapshot을 새로 생성합니다.\n- participationDivisionInfoUpdateDtos 를 전달하면 participationDivisionInfoSnapshots을 새로 생성합니다.\n- playerSnapshotUpdateDto, participationDivisionInfoUpdateDtos 둘 다 전달하면 둘 다 새로 생성합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.applications.done.updateDoneApplication",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-6 applications",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "applicationId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "applicationId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "UpdateDoneApplicationReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "UpdateDoneApplicationRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/user/applications/{applicationId}/expected-payment": {
      "get": {
        "tags": [
          "u-6 applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "applicationId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetExpectedPaymentRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormGetExpectedPaymentRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-6-6 getExpectedPayment",
        "description": "u-6-6 getExpectedPayment.\n- RoleLevel: USER.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.applications.expected-payment.getExpectedPayment",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-6 applications",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "applicationId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "applicationId",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "GetExpectedPaymentRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/posts": {
      "post": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [],
        "requestBody": {
          "description": "CreatePostReqBody 게시글 작성 요청 본문",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreatePostRes 게시글 작성 응답",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreatePostRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-1 createPost",
        "description": "u-7-1 createPost.\n- RoleLevel: USER.\n- 새로운 게시글을 작성합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.createPost",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreatePostReqBody 게시글 작성 요청 본문",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreatePostRes 게시글 작성 응답",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "get": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindPostsReqQuery"
            },
            "description": "FindPostsReqQuery 게시글 조회 쿼리",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "FindPostsRes 게시글 조회 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindPostsRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-2 findPosts",
        "description": "u-7-2 findPosts.\n- RoleLevel: PUBLIC_OR_USER.\n- 여러 게시글을 조회합니다.\n- ACTIVE 상태인 게시글들만 조회합니다.\n- 비로그인 유저의 경우 좋아요 여부를 확인할 수 없습니다.\n- 로그인 유저의 경우 자신이 좋아요를 누른 게시글인지 확인할 수 있습니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.findPosts",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "query",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "FindPostsReqQuery 게시글 조회 쿼리",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "FindPostsRes 게시글 조회 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/posts/{postId}": {
      "get": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "게시글 id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetPostRes 게시글 조회 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormGetPostRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-3 getPost",
        "description": "u-7-3 getPost.\n- RoleLevel: PUBLIC_OR_USER.\n- 특정 게시글을 조회합니다.\n- 비로그인 유저의 경우 좋아요 여부를 확인할 수 없습니다.\n- 로그인 유저의 경우 자신이 좋아요를 누른 게시글인지 확인할 수 있습니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.getPost",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "postId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "게시글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "GetPostRes 게시글 조회 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      },
      "patch": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "게시글 id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "UpdatePostReqBody 게시글 수정 요청 본문",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "UpdatePostRes 게시글 수정 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUpdatePostRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-4 updatePost",
        "description": "u-7-4 updatePost.\n- RoleLevel: USER.\n- 본인이 작성한 게시글을 수정합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.updatePost",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "postId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "게시글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "UpdatePostReqBody 게시글 수정 요청 본문",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "UpdatePostRes 게시글 수정 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      },
      "delete": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "게시글 id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "void 게시글 삭제 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-5 deletePost",
        "description": "u-7-5 deletePost.\n- RoleLevel: USER.\n- 본인이 작성한 게시글을 삭제합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.deletePost",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "postId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "게시글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void 게시글 삭제 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "DELETE"
      }
    },
    "/user/posts/{postId}/like": {
      "post": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "게시글 id",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "void 좋아요 추가 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-6 createPostLike",
        "description": "u-7-6 createPostLike.\n- RoleLevel: USER.\n- 게시글에 좋아요를 추가합니다.\n- 동일한 게시물에 중복으로 좋아요를 누를 수 없습니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.like.createPostLike",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "postId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "게시글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void 좋아요 추가 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "delete": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "게시글 id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "void 좋아요 취소 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-7 deletePostLike",
        "description": "u-7-7 deletePostLike.\n- RoleLevel: USER.\n- 게시글에 대한 좋아요를 취소합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.like.deletePostLike",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "postId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "게시글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void 좋아요 취소 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "DELETE"
      }
    },
    "/user/posts/{postId}/report": {
      "post": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "게시글 id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "CreatePostReportReqBody 게시글 신고 요청 본문",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostReportReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "void 게시글 신고 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-8 createPostReport",
        "description": "u-7-8 createPostReport.\n- RoleLevel: USER.\n- 게시글을 신고합니다.\n- 동일한 게시물에 중복으로 신고를 할 수 없습니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.report.createPostReport",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "postId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "게시글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreatePostReportReqBody 게시글 신고 요청 본문",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void 게시글 신고 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "delete": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "게시글 id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "void 게시글 신고 취소 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-9 deletePostReport",
        "description": "u-7-9 deletePostReport.\n- RoleLevel: USER.\n- 게시글 신고를 취소합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.report.deletePostReport",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "postId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "게시글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void 게시글 신고 취소 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "DELETE"
      }
    },
    "/user/posts/{postId}/comment": {
      "post": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "게시글 id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "CreateCommentReqBody 댓글 작성 요청 본문",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreateCommentRes 댓글 작성 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateCommentRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-10 createComment",
        "description": "u-7-10 createComment.\n- RoleLevel: USER.\n- 게시글에 댓글을 추가합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.comment.createComment",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "postId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "게시글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreateCommentReqBody 댓글 작성 요청 본문",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreateCommentRes 댓글 작성 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "get": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "게시글 id",
            "required": true
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindCommentsReqQuery"
            },
            "description": "FindCommentsReqQuery 댓글 조회 쿼리",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "FindCommentsRes 댓글 조회 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindCommentsRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-12 findComments",
        "description": "u-7-12 findComments.\n- RoleLevel: PUBLIC_OR_USER.\n- 게시글의 댓글들을 조회합니다.\n- 비로그인 유저의 경우 좋아요 여부를 확인할 수 없습니다.\n- 로그인 유저의 경우 자신이 좋아요를 누른 댓글인지 확인할 수 있습니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.comment.findComments",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "postId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "게시글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "query",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "FindCommentsReqQuery 댓글 조회 쿼리",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "FindCommentsRes 댓글 조회 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/posts/{postId}/comment/{commentId}/reply": {
      "post": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "게시글 id",
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "댓글 id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "CreateCommentReplyReqBody 대댓글 작성 요청 본문",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentReplyReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreateCommentReplyRes 대댓글 작성 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateCommentReplyRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-11 createCommentReply",
        "description": "u-7-11 createCommentReply.\n- RoleLevel: USER.\n- 댓글에 대한 대댓글을 추가합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.comment.reply.createCommentReply",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "postId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "게시글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "commentId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "댓글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreateCommentReplyReqBody 대댓글 작성 요청 본문",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreateCommentReplyRes 대댓글 작성 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "get": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "",
            "required": true
          },
          {
            "name": "commentId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "댓글 id",
            "required": true
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindRepliesReqQuery"
            },
            "description": "FindCommentRepliesReqQuery 대댓글 조회 쿼리",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "FindCommentsRes 대댓글 조회 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindCommentsRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-13 findCommentReplies",
        "description": "u-7-13 findCommentReplies.\n- RoleLevel: PUBLIC_OR_USER.\n- 댓글의 대댓글들을 조회합니다.\n- 비로그인 유저의 경우 좋아요 여부를 확인할 수 없습니다.\n- 로그인 유저의 경우 자신이 좋아요를 누른 대댓글인지 확인할 수 있습니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.comment.reply.findCommentReplies",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "commentId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "댓글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "query",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "FindCommentRepliesReqQuery 대댓글 조회 쿼리",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "FindCommentsRes 대댓글 조회 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/posts/comment/{commentId}": {
      "patch": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "댓글 id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "UpdateCommentReqBody 댓글 수정 요청 본문",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCommentReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "UpdateCommentRes 댓글 수정 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUpdateCommentRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-14 updateComment",
        "description": "u-7-14 updateComment.\n- RoleLevel: USER.\n- 본인이 작성한 댓글 or 대댓글을 수정합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.comment.updatePostComment",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "commentId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "댓글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "UpdateCommentReqBody 댓글 수정 요청 본문",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "UpdateCommentRes 댓글 수정 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      },
      "delete": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "댓글 id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "void 댓글 삭제 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-15 deleteComment",
        "description": "u-7-15 deleteComment.\n- RoleLevel: USER.\n- 본인이 작성한 댓글 or 대댓글을 삭제합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.comment.deletePostComment",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "commentId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "댓글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void 댓글 삭제 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "DELETE"
      }
    },
    "/user/posts/comment/{commentId}/like": {
      "post": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "댓글 id",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "void 좋아요 추가 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-16 createCommentLike",
        "description": "u-7-16 createCommentLike.\n- RoleLevel: USER.\n- 댓글에 좋아요를 추가합니다.\n- 동일한 댓글에 중복으로 좋아요를 누를 수 없습니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.comment.like.createPostCommentLike",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "commentId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "댓글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void 좋아요 추가 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "delete": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "댓글 id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "void 좋아요 취소 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-17 deleteCommentLike",
        "description": "u-7-17 deleteCommentLike.\n- RoleLevel: USER.\n- 댓글에 대한 좋아요를 취소합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.comment.like.deletePostCommentLike",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "commentId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "댓글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void 좋아요 취소 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "DELETE"
      }
    },
    "/user/posts/comment/{commentId}/report": {
      "post": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "댓글 id",
            "required": true
          }
        ],
        "requestBody": {
          "description": "CreateCommentReportReqBody 댓글 신고 요청 본문",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentReportReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "void 댓글 신고 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-18 createCommentReport",
        "description": "u-7-18 createCommentReport.\n- RoleLevel: USER.\n- 댓글을 신고합니다.\n- 동일한 댓글에 중복으로 신고를 할 수 없습니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.comment.report.createPostCommentReport",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "commentId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "댓글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreateCommentReportReqBody 댓글 신고 요청 본문",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void 댓글 신고 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "delete": {
        "tags": [
          "u-7 posts"
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "댓글 id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "void 댓글 신고 취소 결과",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-7-19 deleteCommentReport",
        "description": "u-7-19 deleteCommentReport.\n- RoleLevel: USER.\n- 댓글 신고를 취소합니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.posts.comment.report.deletePostCommentReport",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-7 posts",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "commentId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "댓글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void 댓글 신고 취소 결과",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "DELETE"
      }
    },
    "/user/view-count/post/{postId}": {
      "post": {
        "tags": [
          "u-8 view-count"
        ],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "게시글 id",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "void",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-8-1 incrementPostViewCount",
        "description": "u-8-1 incrementPostViewCount.\n- RoleLevel: PUBLIC_OR_USER.\n- 게시글 조회수를 증가시킵니다.\n- 로그인 한 유저의 경우 accessToken에서 userId를 추출하여 사용자를 식별합니다.\n- 로그인하지 않은 유저의 경우 ip를 사용하여 사용자를 식별합니다.\n- 동일한 userId로 하루에 한 번만 조회수를 증가시킬 수 있습니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.view-count.post.incrementPostViewCount",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-8 view-count",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "postId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "게시글 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/view-count/competition/{competitionId}": {
      "post": {
        "tags": [
          "u-8 view-count"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "대회 id",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "void",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-8-2 incrementCompetitionViewCount",
        "description": "u-8-2 incrementCompetitionViewCount.\n- RoleLevel: PUBLIC_OR_USER.\n- 대회 조회수를 증가시킵니다.\n- 로그인 한 유저의 경우 accessToken에서 userId를 추출하여 사용자를 식별합니다.\n- 로그인하지 않은 유저의 경우 ip를 사용하여 사용자를 식별합니다.\n- 동일한 userId로 하루에 한 번만 조회수를 증가시킬 수 있습니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.view-count.competition.incrementCompetitionViewCount",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-8 view-count",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "competitionId",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "대회 id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/images": {
      "post": {
        "tags": [
          "u-9 images"
        ],
        "parameters": [],
        "requestBody": {
          "description": "CreateImageReqBody",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateImageReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreateImageRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateImageRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-9-1 createImage",
        "description": "u-9-1 createImage.\n- RoleLevel: USER.\n- imageEntity를 생성하고, presignedPost를 반환합니다.\n- presignedPost는 이미지를 업로드할 때 사용됩니다.\n- presignedPost는 5분 후 만료되도록 설정되어 있습니다.\n- presignedPost는 5MB 이하의 이미지만 업로드할 수 있도록 설정되어 있습니다.\n- imageEntity는 10분 후에도 이미지 소유 Entity에게 FK로 연결되지 않으면 주기적으로 삭제될수 있습니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.images.createImage",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-9 images",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "body",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "CreateImageReqBody",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreateImageRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/images/user-profile": {
      "post": {
        "tags": [
          "u-9 images"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserProfileImagePresignedPostReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "CreateImageRes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateUserProfileImagePresignedPostRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-9-2 createUserProfileImagePresignedPost",
        "description": "u-9-2 createUserProfileImagePresignedPost.\n- RoleLevel: USER.\n- userId에 해당하는 user의 profile image를 업로드할 때 사용할 presignedPost를 반환합니다.\n- presignedPost는 이미지를 업로드할 때 사용됩니다.\n- presignedPost는 5분 후 만료되도록 설정되어 있습니다.\n- presignedPost는 5MB 이하의 이미지만 업로드할 수 있도록 설정되어 있습니다.\n\nQ. 왜 userProfileImage는 ImageEntity를 반환하지 않나요?\n- A. userProfileImage는 userId 를 key로 bucket에 저장됩니다. 따라서 이미지를 식별하기위한 ImageEntity가 필요하지 않습니다.\n\nQ. 왜 userProfileImage는 userId를 key로 bucket에 저장하나요?\n- A. 게시글이나 댓글을 볼 때, 작성자의 프로필 이미지를 함께 보여주어야 합니다. 게시글과 댓글에는 이미 작성자의 userId가 포함되어 있습니다. 그래서 userId를 키로 사용해 프로필 이미지를 버킷에 저장하면, 게시글이나 댓글을 조회할 때 userId를 이용해 쉽게 해당 작성자의 프로필 이미지를 찾을 수 있습니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.images.user-profile.createUserProfileImagePresignedPost",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-9 images",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "CreateImageRes",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "delete": {
        "tags": [
          "u-9 images"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-9-3 deleteUserProfileImage",
        "description": "u-9-3 deleteUserProfileImage.\n- RoleLevel: USER.\n- userId를 key로 사용해 버킷에서 해당 이미지를 삭제합니다.\n\nQ. 왜 user domain에서 이미지를 삭제하지 않고 image domain에서 삭제하나요?\n- A. bucket에 저장된 이미지를 직접 삭제하는 것은 image domain의 역할이라고 판단했습니다.",
        "security": [
          {
            "bearer": []
          }
        ],
        "x-nestia-namespace": "user.images.user-profile.deleteUserProfileImage",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-9 images",
                "kind": "text"
              }
            ]
          },
          {
            "name": "security",
            "text": [
              {
                "text": "bearer",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "DELETE"
      }
    }
  },
  "components": {
    "schemas": {
      "AUTH_ACCESS_TOKEN_MISSING": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1000
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "AUTH_ACCESS_TOKEN_MISSING"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "accssToken이 없습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "AUTH_ACCESS_TOKEN_UNAUTHORIZED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              401
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1001
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "AUTH_ACCESS_TOKEN_UNAUTHORIZED"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "유효하지 않은 accessToken 입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "AUTH_LEVEL_FORBIDDEN": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              403
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1003
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "AUTH_LEVEL_FORBIDDEN"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "API 호출 권한이 없습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "CreateAdminAccessTokenRes": {
        "type": "object",
        "properties": {
          "adminAccessTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAdminAccessToken"
            }
          }
        },
        "nullable": false,
        "required": [
          "adminAccessTokens"
        ]
      },
      "IAdminAccessToken": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "name",
          "accessToken",
          "refreshToken"
        ]
      },
      "AllErrorTypes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AUTH_ACCESS_TOKEN_MISSING"
          },
          {
            "$ref": "#/components/schemas/AUTH_ACCESS_TOKEN_UNAUTHORIZED"
          },
          {
            "$ref": "#/components/schemas/AUTH_LEVEL_FORBIDDEN"
          },
          {
            "$ref": "#/components/schemas/INTERNAL_SERVER_ERROR"
          },
          {
            "$ref": "#/components/schemas/ENTITY_NOT_FOUND"
          },
          {
            "$ref": "#/components/schemas/AUTH_REFRESH_TOKEN_UNAUTHORIZED"
          },
          {
            "$ref": "#/components/schemas/AUTH_UNREGISTERED_ADMIN_CREDENTIALS"
          },
          {
            "$ref": "#/components/schemas/SNS_AUTH_NOT_SUPPORTED_SNS_PROVIDER"
          },
          {
            "$ref": "#/components/schemas/SNS_AUTH_KAKAO_LOGIN_FAIL"
          },
          {
            "$ref": "#/components/schemas/SNS_AUTH_NAVER_LOGIN_FAIL"
          },
          {
            "$ref": "#/components/schemas/SNS_AUTH_GOOGLE_LOGIN_FAIL"
          },
          {
            "$ref": "#/components/schemas/REGISTER_NICKNAME_DUPLICATED"
          },
          {
            "$ref": "#/components/schemas/REGISTER_BIRTH_INVALID"
          },
          {
            "$ref": "#/components/schemas/REGISTER_POLICY_CONSENT_REQUIRED"
          },
          {
            "$ref": "#/components/schemas/REGISTER_PHONE_NUMBER_REQUIRED"
          },
          {
            "$ref": "#/components/schemas/COMPETITIONS_COMPETITION_STATUS_CANNOT_BE_ACTIVE"
          },
          {
            "$ref": "#/components/schemas/COMPETITIONS_DIVISION_DUPLICATED"
          },
          {
            "$ref": "#/components/schemas/COMPETITIONS_REQUIRED_ADDITIONAL_INFO_DUPLICATED"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_DIVISION_NOT_FOUND"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_DIVISION_AGE_NOT_MATCH"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_DIVISION_GENDER_NOT_MATCH"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_REGISTRATION_NOT_STARTED"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_REGISTRATION_ENDED"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_PLAYER_SNAPSHOT_OR_DIVISION_INFO_REQUIRED"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_SELF_APPLICATION_NOT_ALLOWED"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_PARTICIPATION_DIVISION_INFO_NOT_FOUND"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_REQUIRED_ADDITIONAL_INFO_NOT_MATCH"
          },
          {
            "$ref": "#/components/schemas/APPLICATIONS_ADDITIONAL_INFO_NOT_FOUND"
          },
          {
            "$ref": "#/components/schemas/POSTS_POST_LIKE_ALREADY_EXIST"
          },
          {
            "$ref": "#/components/schemas/POSTS_POST_REPORT_ALREADY_EXIST"
          },
          {
            "$ref": "#/components/schemas/POSTS_COMMENT_LIKE_ALREADY_EXIST"
          },
          {
            "$ref": "#/components/schemas/POSTS_COMMENT_REPORT_ALREADY_EXIST"
          },
          {
            "$ref": "#/components/schemas/POSTS_COMMENT_REPLY_TO_REPLY_NOT_ALLOWED"
          },
          {
            "$ref": "#/components/schemas/VIEW_COUNT_IVALID_ENTITY_TYPE"
          },
          {
            "$ref": "#/components/schemas/VIEW_COUNT_ALREADY_INCREMENTED"
          }
        ]
      },
      "INTERNAL_SERVER_ERROR": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              500
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              500
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "INTERNAL_SERVER_ERROR"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "Internal Server Error"
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "ENTITY_NOT_FOUND": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              404
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              404
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "ENTITY_NOT_FOUND"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "Entity Not Found"
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "AUTH_REFRESH_TOKEN_UNAUTHORIZED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              401
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1002
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "AUTH_REFRESH_TOKEN_UNAUTHORIZED"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "유효하지 않은 refreshToken 입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "AUTH_UNREGISTERED_ADMIN_CREDENTIALS": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              403
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1004
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "AUTH_UNREGISTERED_ADMIN_CREDENTIALS"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "등록되지 않은 관리자 계정입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "SNS_AUTH_NOT_SUPPORTED_SNS_PROVIDER": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              2000
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "SNS_AUTH_NOT_SUPPORTED_SNS_PROVIDER"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "지원하지 않는 SNS AUTH PROVIDER 입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "SNS_AUTH_KAKAO_LOGIN_FAIL": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              2001
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "SNS_AUTH_KAKAO_LOGIN_FAIL"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "카카오 로그인에 실패했습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "SNS_AUTH_NAVER_LOGIN_FAIL": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              2002
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "SNS_AUTH_NAVER_LOGIN_FAIL"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "네이버 로그인에 실패했습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "SNS_AUTH_GOOGLE_LOGIN_FAIL": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              2003
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "SNS_AUTH_GOOGLE_LOGIN_FAIL"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "구글 로그인에 실패했습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "REGISTER_NICKNAME_DUPLICATED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              409
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              3000
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "REGISTER_NICKNAME_DUPLICATED"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "이미 사용중인 닉네임입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "REGISTER_BIRTH_INVALID": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              3001
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "REGISTER_BIRTH_INVALID"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "생년월일이 유효하지 않습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "REGISTER_POLICY_CONSENT_REQUIRED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              3002
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "REGISTER_POLICY_CONSENT_REQUIRED"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "필수 동의 항목을 모두 동의해야 합니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "REGISTER_PHONE_NUMBER_REQUIRED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              3003
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "REGISTER_PHONE_NUMBER_REQUIRED"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "회원가입을 위해서는 휴대폰 번호인증이 필요합니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "COMPETITIONS_COMPETITION_STATUS_CANNOT_BE_ACTIVE": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              6000
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "COMPETITIONS_COMPETITION_STATUS_CANNOT_BE_ACTIVE"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "대회의 상태를 ACTIVE로 변경할 수 없습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "COMPETITIONS_DIVISION_DUPLICATED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              409
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              6001
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "COMPETITIONS_DIVISION_DUPLICATED"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "대회 부문이 중복되었습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "COMPETITIONS_REQUIRED_ADDITIONAL_INFO_DUPLICATED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              409
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              6002
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "COMPETITIONS_REQUIRED_ADDITIONAL_INFO_DUPLICATED"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "대회 추가 정보가 중복되었습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "APPLICATIONS_DIVISION_NOT_FOUND": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              404
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              7000
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "APPLICATIONS_DIVISION_NOT_FOUND"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "신청 부문을 찾을 수 없습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "APPLICATIONS_DIVISION_AGE_NOT_MATCH": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              7001
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "APPLICATIONS_DIVISION_AGE_NOT_MATCH"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "선수의 나이와 신청 부문의 나이가 맞지 않습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "APPLICATIONS_DIVISION_GENDER_NOT_MATCH": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              7002
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "APPLICATIONS_DIVISION_GENDER_NOT_MATCH"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "선수의 성별과 신청 부문의 성별이 맞지 않습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "APPLICATIONS_REGISTRATION_NOT_STARTED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              7003
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "APPLICATIONS_REGISTRATION_NOT_STARTED"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "대회 신청 기간 이전입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "APPLICATIONS_REGISTRATION_ENDED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              7004
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "APPLICATIONS_REGISTRATION_ENDED"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "대회 신청 기간이 종료되었습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "APPLICATIONS_PLAYER_SNAPSHOT_OR_DIVISION_INFO_REQUIRED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              7005
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "APPLICATIONS_PLAYER_SNAPSHOT_OR_DIVISION_INFO_REQUIRED"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "PlayerSnapshotUpdateDto or ParticipationDivisionInfoUpdateDtos or AdditionalInfoUpdateDto must be provided."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "APPLICATIONS_SELF_APPLICATION_NOT_ALLOWED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              7007
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "APPLICATIONS_SELF_APPLICATION_NOT_ALLOWED"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "본인 신청의 경우 선수 정보와 사용자 정보가 일치해야 합니다"
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "APPLICATIONS_PARTICIPATION_DIVISION_INFO_NOT_FOUND": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              404
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              7008
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "APPLICATIONS_PARTICIPATION_DIVISION_INFO_NOT_FOUND"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "변경하고자 하는 participationDivisionInfo가 존재하지 않습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "APPLICATIONS_REQUIRED_ADDITIONAL_INFO_NOT_MATCH": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              404
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              7009
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "APPLICATIONS_REQUIRED_ADDITIONAL_INFO_NOT_FOUND"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "대회 신청시 필요한 추가 정보가 존재하지 않습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "APPLICATIONS_ADDITIONAL_INFO_NOT_FOUND": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              404
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              7010
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "APPLICATIONS_ADDITIONAL_INFO_NOT_FOUND"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "수정하고자 하는 additionalInfo가 존재하지 않습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "POSTS_POST_LIKE_ALREADY_EXIST": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              409
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              8000
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "POSTS_POST_LIKE_ALREADY_EXIST"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "이미 좋아요를 누른 게시글입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "POSTS_POST_REPORT_ALREADY_EXIST": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              409
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              8001
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "POSTS_POST_REPORT_ALREADY_EXIST"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "이미 신고한 게시글입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "POSTS_COMMENT_LIKE_ALREADY_EXIST": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              409
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              8002
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "POSTS_COMMENT_LIKE_ALREADY_EXIST"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "이미 좋아요를 누른 댓글입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "POSTS_COMMENT_REPORT_ALREADY_EXIST": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              409
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              8003
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "POSTS_COMMENT_REPORT_ALREADY_EXIST"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "이미 신고한 댓글입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "POSTS_COMMENT_REPLY_TO_REPLY_NOT_ALLOWED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              8004
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "POSTS_COMMENT_REPLY_TO_REPLY_NOT_ALLOWED"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "대댓글의 대댓글은 생성할 수 없습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "VIEW_COUNT_IVALID_ENTITY_TYPE": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              9000
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "VIEW_COUNT_IVALID_ENTITY_TYPE"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "유효하지 않은 entity type 입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "VIEW_COUNT_ALREADY_INCREMENTED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              409
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              9001
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "VIEW_COUNT_ALREADY_INCREMENTED"
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "이미 조회수가 증가된 entity 입니다, 하루에 한 번만 증가 가능합니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "type",
          "result"
        ]
      },
      "SnsLoginReqBody": {
        "type": "object",
        "properties": {
          "snsAuthProvider": {
            "type": "string",
            "enum": [
              "APPLE",
              "GOOGLE",
              "KAKAO",
              "NAVER"
            ],
            "title": "- snsProvider",
            "description": "- snsProvider."
          },
          "snsAuthCode": {
            "type": "string",
            "title": "- authCode",
            "description": "- authCode."
          }
        },
        "nullable": false,
        "required": [
          "snsAuthProvider",
          "snsAuthCode"
        ]
      },
      "ResponseFormSnsLoginRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/SnsLoginRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "SnsLoginRes": {
        "type": "object",
        "properties": {
          "authTokens": {
            "$ref": "#/components/schemas/IAuthTokens",
            "title": "- authTokens",
            "description": "- authTokens."
          }
        },
        "nullable": false,
        "required": [
          "authTokens"
        ]
      },
      "IAuthTokens": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "accessToken",
          "refreshToken"
        ]
      },
      "RefreshTokenReqBody": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "title": "- refreshToken",
            "description": "- refreshToken."
          }
        },
        "nullable": false,
        "required": [
          "refreshToken"
        ]
      },
      "ResponseFormRefreshTokenRet": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/RefreshTokenRet"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "RefreshTokenRet": {
        "type": "object",
        "properties": {
          "authTokens": {
            "$ref": "#/components/schemas/IAuthTokens",
            "title": "- authTokens",
            "description": "- authTokens."
          }
        },
        "nullable": false,
        "required": [
          "authTokens"
        ]
      },
      "ResponseFormAcquireAdminRoleRet": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/AcquireAdminRoleRet"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "AcquireAdminRoleRet": {
        "type": "object",
        "properties": {
          "authTokens": {
            "$ref": "#/components/schemas/IAuthTokens",
            "title": "- authTokens",
            "description": "- authTokens."
          }
        },
        "nullable": false,
        "required": [
          "authTokens"
        ]
      },
      "ResponseFormGetTemporaryUserRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/GetTemporaryUserRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "GetTemporaryUserRes": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/ITemporaryUser"
          }
        },
        "nullable": false,
        "required": [
          "user"
        ]
      },
      "ITemporaryUser": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "snsAuthProvider": {
            "type": "string",
            "enum": [
              "APPLE",
              "GOOGLE",
              "KAKAO",
              "NAVER"
            ],
            "title": "SNS 공급자. User가 로그인하는데 사용한 SNS 플랫폼을 나타냅니다",
            "description": "SNS 공급자. User가 로그인하는데 사용한 SNS 플랫폼을 나타냅니다."
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "HOST",
              "TEMPORARY_USER",
              "USER"
            ],
            "title": "User 역할. User의 접근 권한을 나타냅니다",
            "description": "User 역할. User의 접근 권한을 나타냅니다.\n- ADMIN: 관리자 권한.\n- HOST: 대회 주최자 권한.\n- USER: 일반 User 권한.\n- TEMPORARY_USER: 회원가입을 완료하지 않은 User 권한."
          },
          "snsId": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "SNS ID. 소셜 로그인을 위한 고유 식별자입니다",
            "description": "SNS ID. 소셜 로그인을 위한 고유 식별자입니다."
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 320,
            "minLength": 1,
            "title": "User 이메일 주소",
            "description": "User 이메일 주소."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "title": "User 이름",
            "description": "User 이름.\n- 컬럼길이는 256으로 설정하였으나, 입력값 유효성검사는 64자 이내로 설정하도록 합니다.\n- User 이름은 한글, 영문, 숫자만 입력 가능합니다."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "title": "User 상태",
            "description": "User 상태.\n- ACTIVE: 활성.\n- INACTIVE: 비활성."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "updatedAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "UpdatedAt",
            "description": "UpdatedAt."
          },
          "nickname": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "nullable": true,
            "title": "User 별명",
            "description": "User 별명.\n- 영문, 한글, 숫자만 입력 가능합니다."
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^01[0-9]{9}$",
            "nullable": true,
            "title": "User 전화번호",
            "description": "User 전화번호.\n- 전화번호가 저장되어 있으면 인증된 전화번호 입니다.\n- ex) 01012345678."
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "nullable": true,
            "title": "User 성별",
            "description": "User 성별."
          },
          "birth": {
            "type": "string",
            "pattern": "^[0-9]{8}$",
            "nullable": true,
            "title": "User 생년월일 (BirtDate YYYYMMDD)",
            "description": "User 생년월일 (BirtDate YYYYMMDD)."
          },
          "belt": {
            "type": "string",
            "enum": [
              "브라운",
              "블랙",
              "블루",
              "선택없음",
              "퍼플",
              "화이트"
            ],
            "nullable": true,
            "title": "User 주짓수 벨트",
            "description": "User 주짓수 벨트."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "snsAuthProvider",
          "role",
          "snsId",
          "email",
          "name",
          "status",
          "createdAt",
          "updatedAt",
          "nickname",
          "phoneNumber",
          "gender",
          "birth",
          "belt"
        ]
      },
      "TId": {
        "type": "string",
        "format": "uuid",
        "description": "UUID v7."
      },
      "TDateOrStringDate": {
        "oneOf": [
          {
            "type": "string",
            "format": "date-time"
          },
          {
            "type": "string",
            "format": "date-time"
          }
        ]
      },
      "ResponseFormIsDuplicatedNicknameRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/IsDuplicatedNicknameRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "IsDuplicatedNicknameRes": {
        "type": "object",
        "properties": {
          "isDuplicated": {
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "isDuplicated"
        ]
      },
      "SendPhoneNumberAuthCodeReqBody": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "pattern": "^01[0-9]{9}$"
          }
        },
        "nullable": false,
        "required": [
          "phoneNumber"
        ]
      },
      "ResponseFormSendPhoneNumberAuthCodeRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/SendPhoneNumberAuthCodeRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "SendPhoneNumberAuthCodeRes": {
        "type": "object",
        "properties": {
          "phoneNumberAuthCode": {
            "$ref": "#/components/schemas/PhoneNumberAuthCode"
          }
        },
        "nullable": false,
        "required": [
          "phoneNumberAuthCode"
        ]
      },
      "PhoneNumberAuthCode": {
        "type": "string",
        "pattern": "^[0-9]{6}$",
        "description": "휴대폰 인증 코드."
      },
      "ConfirmAuthCodeReqBody": {
        "type": "object",
        "properties": {
          "authCode": {
            "type": "string",
            "pattern": "^[0-9]{6}$"
          }
        },
        "nullable": false,
        "required": [
          "authCode"
        ]
      },
      "ResponseFormConfirmAuthCodeRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/ConfirmAuthCodeRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "ConfirmAuthCodeRes": {
        "type": "object",
        "properties": {
          "isConfirmed": {
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "isConfirmed"
        ]
      },
      "RegisterUserReqBody": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/PickIUsernicknamegenderbirthbelt"
          },
          "consentPolicyTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ADVERTISEMENT",
                "PRIVACY",
                "REFUND",
                "TERMS_OF_SERVICE"
              ]
            }
          }
        },
        "nullable": false,
        "required": [
          "user",
          "consentPolicyTypes"
        ]
      },
      "PickIUsernicknamegenderbirthbelt": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "title": "User 별명",
            "description": "User 별명.\n- 영문, 한글, 숫자만 입력 가능합니다."
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "title": "User 성별",
            "description": "User 성별."
          },
          "birth": {
            "type": "string",
            "pattern": "^[0-9]{8}$",
            "title": "User 생년월일 (BirtDate YYYYMMDD)",
            "description": "User 생년월일 (BirtDate YYYYMMDD)."
          },
          "belt": {
            "type": "string",
            "enum": [
              "브라운",
              "블랙",
              "블루",
              "선택없음",
              "퍼플",
              "화이트"
            ],
            "title": "User 주짓수 벨트",
            "description": "User 주짓수 벨트."
          }
        },
        "nullable": false,
        "required": [
          "nickname",
          "gender",
          "birth",
          "belt"
        ],
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "ResponseFormRegisterUserRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/RegisterUserRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "RegisterUserRes": {
        "type": "object",
        "properties": {
          "authTokens": {
            "$ref": "#/components/schemas/IAuthTokens"
          }
        },
        "nullable": false,
        "required": [
          "authTokens"
        ]
      },
      "CreateUserReqBody": {
        "type": "object",
        "properties": {
          "snsAuthProvider": {
            "type": "string",
            "enum": [
              "APPLE",
              "GOOGLE",
              "KAKAO",
              "NAVER"
            ],
            "title": "SNS 공급자. User가 로그인하는데 사용한 SNS 플랫폼을 나타냅니다",
            "description": "SNS 공급자. User가 로그인하는데 사용한 SNS 플랫폼을 나타냅니다."
          },
          "snsId": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "SNS ID. 소셜 로그인을 위한 고유 식별자입니다",
            "description": "SNS ID. 소셜 로그인을 위한 고유 식별자입니다."
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 320,
            "minLength": 1,
            "title": "User 이메일 주소",
            "description": "User 이메일 주소."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "title": "User 이름",
            "description": "User 이름.\n- 컬럼길이는 256으로 설정하였으나, 입력값 유효성검사는 64자 이내로 설정하도록 합니다.\n- User 이름은 한글, 영문, 숫자만 입력 가능합니다."
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^01[0-9]{9}$",
            "title": "User 전화번호",
            "description": "User 전화번호.\n- 전화번호가 저장되어 있으면 인증된 전화번호 입니다.\n- ex) 01012345678."
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "title": "User 성별",
            "description": "User 성별."
          },
          "birth": {
            "type": "string",
            "pattern": "^[0-9]{8}$",
            "title": "User 생년월일 (BirtDate YYYYMMDD)",
            "description": "User 생년월일 (BirtDate YYYYMMDD)."
          }
        },
        "nullable": false,
        "required": [
          "snsAuthProvider",
          "snsId",
          "email",
          "name"
        ]
      },
      "ResponseFormCreateUserRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateUserRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreateUserRes": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/ITemporaryUser"
          }
        },
        "nullable": false,
        "required": [
          "user"
        ]
      },
      "UpdateUserReqBody": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "title": "User 별명",
            "description": "User 별명.\n- 영문, 한글, 숫자만 입력 가능합니다."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "title": "User 이름",
            "description": "User 이름.\n- 컬럼길이는 256으로 설정하였으나, 입력값 유효성검사는 64자 이내로 설정하도록 합니다.\n- User 이름은 한글, 영문, 숫자만 입력 가능합니다."
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "title": "User 성별",
            "description": "User 성별."
          },
          "birth": {
            "type": "string",
            "pattern": "^[0-9]{8}$",
            "title": "User 생년월일 (BirtDate YYYYMMDD)",
            "description": "User 생년월일 (BirtDate YYYYMMDD)."
          },
          "belt": {
            "type": "string",
            "enum": [
              "브라운",
              "블랙",
              "블루",
              "선택없음",
              "퍼플",
              "화이트"
            ],
            "title": "User 주짓수 벨트",
            "description": "User 주짓수 벨트."
          }
        },
        "nullable": false
      },
      "ResponseFormUpdateUserRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/UpdateUserRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "UpdateUserRes": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/IUser"
          }
        },
        "nullable": false,
        "required": [
          "user"
        ]
      },
      "IUser": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "HOST",
              "TEMPORARY_USER",
              "USER"
            ],
            "title": "User 역할. User의 접근 권한을 나타냅니다",
            "description": "User 역할. User의 접근 권한을 나타냅니다.\n- ADMIN: 관리자 권한.\n- HOST: 대회 주최자 권한.\n- USER: 일반 User 권한.\n- TEMPORARY_USER: 회원가입을 완료하지 않은 User 권한."
          },
          "snsAuthProvider": {
            "type": "string",
            "enum": [
              "APPLE",
              "GOOGLE",
              "KAKAO",
              "NAVER"
            ],
            "title": "SNS 공급자. User가 로그인하는데 사용한 SNS 플랫폼을 나타냅니다",
            "description": "SNS 공급자. User가 로그인하는데 사용한 SNS 플랫폼을 나타냅니다."
          },
          "snsId": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "SNS ID. 소셜 로그인을 위한 고유 식별자입니다",
            "description": "SNS ID. 소셜 로그인을 위한 고유 식별자입니다."
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 320,
            "minLength": 1,
            "title": "User 이메일 주소",
            "description": "User 이메일 주소."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "title": "User 이름",
            "description": "User 이름.\n- 컬럼길이는 256으로 설정하였으나, 입력값 유효성검사는 64자 이내로 설정하도록 합니다.\n- User 이름은 한글, 영문, 숫자만 입력 가능합니다."
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^01[0-9]{9}$",
            "title": "User 전화번호",
            "description": "User 전화번호.\n- 전화번호가 저장되어 있으면 인증된 전화번호 입니다.\n- ex) 01012345678."
          },
          "nickname": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "title": "User 별명",
            "description": "User 별명.\n- 영문, 한글, 숫자만 입력 가능합니다."
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "title": "User 성별",
            "description": "User 성별."
          },
          "birth": {
            "type": "string",
            "pattern": "^[0-9]{8}$",
            "title": "User 생년월일 (BirtDate YYYYMMDD)",
            "description": "User 생년월일 (BirtDate YYYYMMDD)."
          },
          "belt": {
            "type": "string",
            "enum": [
              "브라운",
              "블랙",
              "블루",
              "선택없음",
              "퍼플",
              "화이트"
            ],
            "title": "User 주짓수 벨트",
            "description": "User 주짓수 벨트."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "title": "User 상태",
            "description": "User 상태.\n- ACTIVE: 활성.\n- INACTIVE: 비활성."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "updatedAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "UpdatedAt",
            "description": "UpdatedAt."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "role",
          "snsAuthProvider",
          "snsId",
          "email",
          "name",
          "phoneNumber",
          "nickname",
          "gender",
          "birth",
          "belt",
          "status",
          "createdAt",
          "updatedAt"
        ],
        "description": "각 snsAuthProvider 마다 제공되는 정보.\n- kakao  : snsId, email, name, phoneNumber, gender, birthday, birthyear.\n- naver  : snsId, email, name, phoneNumber, gender, birthday, birthyear.\n- google : snsId, email, name.\n- apple  : snsId, email, name."
      },
      "ResponseFormGetMeRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/GetMeRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "GetMeRes": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/IUser"
          }
        },
        "nullable": false,
        "required": [
          "user"
        ]
      },
      "ResponseFormFindAllTypesOfLatestPoliciesRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/FindAllTypesOfLatestPoliciesRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "FindAllTypesOfLatestPoliciesRes": {
        "type": "object",
        "properties": {
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPolicyFindMany"
            }
          }
        },
        "nullable": false,
        "required": [
          "policies"
        ]
      },
      "IPolicyFindMany": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "type": {
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "PRIVACY",
              "REFUND",
              "TERMS_OF_SERVICE"
            ],
            "title": "약관의 종류",
            "description": "약관의 종류.\n- TERMS_OF_SERVICE: 서비스 이용 약관.\n- PRIVACY: 개인정보 처리 방침.\n- REFUND: 환불 정책.\n- ADVERTISEMENT: 광고정책."
          },
          "version": {
            "type": "integer",
            "minimum": 0,
            "title": "약관의 버전",
            "description": "약관의 버전."
          },
          "isMandatory": {
            "type": "boolean",
            "title": "약관동의 필수여수",
            "description": "약관동의 필수여수.\n- true: 필수.\n- false: 선택."
          },
          "title": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "약관의 제목",
            "description": "약관의 제목.\n- ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "createdAt",
          "type",
          "version",
          "isMandatory",
          "title"
        ]
      },
      "ResponseFormGetPolicyRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/GetPolicyRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "GetPolicyRes": {
        "type": "object",
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/IPolicy"
          }
        },
        "nullable": false,
        "required": [
          "policy"
        ]
      },
      "IPolicy": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "version": {
            "type": "integer",
            "minimum": 0,
            "title": "약관의 버전",
            "description": "약관의 버전."
          },
          "type": {
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "PRIVACY",
              "REFUND",
              "TERMS_OF_SERVICE"
            ],
            "title": "약관의 종류",
            "description": "약관의 종류.\n- TERMS_OF_SERVICE: 서비스 이용 약관.\n- PRIVACY: 개인정보 처리 방침.\n- REFUND: 환불 정책.\n- ADVERTISEMENT: 광고정책."
          },
          "isMandatory": {
            "type": "boolean",
            "title": "약관동의 필수여수",
            "description": "약관동의 필수여수.\n- true: 필수.\n- false: 선택."
          },
          "title": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "약관의 제목",
            "description": "약관의 제목.\n- ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "title": "약관의 내용",
            "description": "약관의 내용.\n- ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "version",
          "type",
          "isMandatory",
          "title",
          "content",
          "createdAt"
        ],
        "description": "약관.\n- 같은 타입의 약관수정이 필요할때는 업데이트가 아닌 새로운 약관을 생성합니다.\n- 새로운 약관이 생성될 때마다 버전을 올립니다."
      },
      "CreatePolicyReqBody": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "PRIVACY",
              "REFUND",
              "TERMS_OF_SERVICE"
            ],
            "title": "약관의 종류",
            "description": "약관의 종류.\n- TERMS_OF_SERVICE: 서비스 이용 약관.\n- PRIVACY: 개인정보 처리 방침.\n- REFUND: 환불 정책.\n- ADVERTISEMENT: 광고정책."
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "title": "약관의 내용",
            "description": "약관의 내용.\n- ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "isMandatory": {
            "type": "boolean",
            "title": "약관동의 필수여수",
            "description": "약관동의 필수여수.\n- true: 필수.\n- false: 선택."
          },
          "title": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "약관의 제목",
            "description": "약관의 제목.\n- ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          }
        },
        "nullable": false,
        "required": [
          "type",
          "content",
          "isMandatory",
          "title"
        ]
      },
      "ResponseFormCreatePolicyRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreatePolicyRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreatePolicyRes": {
        "type": "object",
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/IPolicy"
          }
        },
        "nullable": false,
        "required": [
          "policy"
        ]
      },
      "FindPoliciesReqQuery": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "PRIVACY",
              "REFUND",
              "TERMS_OF_SERVICE"
            ]
          }
        },
        "nullable": false
      },
      "ResponseFormFindPoliciesRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/FindPoliciesRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "FindPoliciesRes": {
        "type": "object",
        "properties": {
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPolicyFindMany"
            }
          }
        },
        "nullable": false,
        "required": [
          "policies"
        ]
      },
      "FindCompetitionsReqQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "maximum": 30,
            "minimum": 1,
            "default": 10,
            "title": "Number of items per page",
            "description": "Number of items per page."
          },
          "sortOption": {
            "type": "string",
            "enum": [
              "마감임박순",
              "일자순",
              "조회순"
            ],
            "title": "대회를 정렬하는 옵션입니다",
            "description": "대회를 정렬하는 옵션입니다.\n- 일자순: 대회 날짜 순으로 정렬\n- 조회순: 조회수 순으로 정렬\n- 마감임박순: 참가 신청 마감일이 가까운 순으로 정렬"
          },
          "locationFilter": {
            "type": "string",
            "enum": [
              "강원",
              "경기",
              "경남",
              "경북",
              "광주",
              "대구",
              "대전",
              "부산",
              "서울",
              "세종",
              "울산",
              "인천",
              "전남",
              "전북",
              "제주",
              "충남",
              "충북"
            ],
            "title": "대회가 열리는 위치로 필터링합니다",
            "description": "대회가 열리는 위치로 필터링합니다.\nex ) 서울, 부산, 인천, 대구, 대전, 광주, 울산, 세종, 경기, 충북, 충남, 전남, 경북, 경남, 강원, 전북, 제주"
          },
          "selectFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "간편결제",
                "단독출전조정",
                "신청가능",
                "얼리버드"
              ]
            },
            "title": "태그를 기준으로 필터링합니다. 중복 선택 가능합니다",
            "description": "태그를 기준으로 필터링합니다. 중복 선택 가능합니다.\n- 간편결제: 간편결제 가능한 대회 (협약 대회)\n- 얼리버드: 얼리버드 할인 기간 중인 대회\n- 신청가능: 참가 신청 가능한 대회\n- 단독출전조정: 단독 참가자의 부문 조정 기간 중인 대회"
          },
          "dateFilter": {
            "type": "string",
            "pattern": "^[0-9]{4}-[0-9]{2}$",
            "title": "- 날짜 필터. YYYY-MM 형식입니다",
            "description": "- 날짜 필터. YYYY-MM 형식입니다."
          }
        },
        "nullable": false
      },
      "ResponseFormFindCompetitionsRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/FindCompetitionsRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "FindCompetitionsRes": {
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "number",
            "title": "Next page number",
            "description": "Next page number.\n다음 페이지가 존재하지 않으면 undefined."
          },
          "competitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICompetitionSummary"
            }
          }
        },
        "nullable": false,
        "required": [
          "competitions"
        ]
      },
      "ICompetitionSummary": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "status": {
            "$ref": "#/components/schemas/TCompetitionStatus",
            "title": "대회의 상태",
            "description": "대회의 상태.\n- ACTIVE: 활성화된 대회 유저에게 노출, 참가 신청 가능.\n- INACTIVE: 비활성화된 대회 유저에게 노출되지 않음, 참가 신청 불가능."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "updatedAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "UpdatedAt",
            "description": "UpdatedAt."
          },
          "title": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "대회명",
            "description": "대회명."
          },
          "address": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "대회가 열리는 위치 (도로명 주소)",
            "description": "대회가 열리는 위치 (도로명 주소)."
          },
          "competitionDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "대회 날짜",
            "description": "대회 날짜."
          },
          "registrationStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가 신청 시작일",
            "description": "참가 신청 시작일."
          },
          "registrationEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가 신청 마감일",
            "description": "참가 신청 마감일."
          },
          "refundDeadlineDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "환불 가능 기간 마감일",
            "description": "환불 가능 기간 마감일."
          },
          "soloRegistrationAdjustmentStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "단독 참가자의 부문 조정 시작일",
            "description": "단독 참가자의 부문 조정 시작일.\n- 부문에 참가자가 한 명만 있는 경우, 해당 참가자를 다른 체급이나 부문으로 조정할 수 있는 기간의 시작을 나타냅니다."
          },
          "soloRegistrationAdjustmentEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "단독 참가자의 부문 조정 마감일",
            "description": "단독 참가자의 부문 조정 마감일."
          },
          "registrationListOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가자 명단 공개일",
            "description": "참가자 명단 공개일."
          },
          "bracketOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "대진표 공개일",
            "description": "대진표 공개일."
          },
          "description": {
            "type": "string",
            "maxLength": 10000,
            "minLength": 1,
            "title": "대회 상세 정보",
            "description": "대회 상세 정보."
          },
          "isPartnership": {
            "type": "boolean",
            "title": "협약 대회 여부",
            "description": "협약 대회 여부."
          },
          "viewCount": {
            "type": "integer",
            "title": "조회수",
            "description": "조회수."
          },
          "earlybirdDiscountSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IEarlybirdDiscountSnapshot"
            },
            "title": "얼리버드 할인 정보",
            "description": "얼리버드 할인 정보.\n- 배열의 길이가 0이면 얼리버드 할인이 없는 대회입니다.\n- 배열의 마지막 요소가 현재 적용중인 얼리버드 할인 정보입니다."
          },
          "competitionPosterImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICompetitionPosterImage"
            }
          }
        },
        "nullable": false,
        "required": [
          "id",
          "status",
          "createdAt",
          "updatedAt",
          "title",
          "address",
          "competitionDate",
          "registrationStartDate",
          "registrationEndDate",
          "refundDeadlineDate",
          "soloRegistrationAdjustmentStartDate",
          "soloRegistrationAdjustmentEndDate",
          "registrationListOpenDate",
          "bracketOpenDate",
          "description",
          "isPartnership",
          "viewCount",
          "earlybirdDiscountSnapshots",
          "competitionPosterImages"
        ]
      },
      "TCompetitionStatus": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ]
      },
      "IEarlybirdDiscountSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "earlybirdStartDate": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "얼리버드 할인 시작일",
            "description": "얼리버드 할인 시작일."
          },
          "earlybirdEndDate": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "얼리버드 할인 마감일",
            "description": "얼리버드 할인 마감일."
          },
          "discountAmount": {
            "type": "integer",
            "minimum": 0,
            "title": "얼리버드 할인 가격",
            "description": "얼리버드 할인 가격.\n- ex) 10000.\n- 단위 : 원.\n- 음수 값은 허용하지 않습니다."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "competitionId": {
            "$ref": "#/components/schemas/TId",
            "title": "Competition id",
            "description": "Competition id."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "earlybirdStartDate",
          "earlybirdEndDate",
          "discountAmount",
          "createdAt",
          "competitionId"
        ]
      },
      "ICompetitionPosterImage": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "competitionId": {
            "$ref": "#/components/schemas/TId",
            "description": "competitionId"
          },
          "imageId": {
            "$ref": "#/components/schemas/TId",
            "description": "imageId\n- u-9-1 createImage 로 생성된 image의 id"
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "description": "createdAt"
          },
          "deletedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "description": "deletedAt"
          },
          "image": {
            "$ref": "#/components/schemas/IImage"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "competitionId",
          "imageId",
          "createdAt",
          "deletedAt",
          "image"
        ]
      },
      "IImage": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7.\n- s3 bucket에 저장되는 이미지의 key로 사용됩니다.\n- `${bucketHost}/${bucketName}/${path}/${id}` 로 접근 가능합니다.\n- ex) http://localhost:9000/najuha-v2-bucket/competition/019000fb-11c3-7766-ad55-17c0c2b18cae"
          },
          "path": {
            "$ref": "#/components/schemas/TImagePath",
            "description": "s3 bucket에 저장되는 이미지의 경로\n- user 프로필 이미지를 생성하는 경우: `user-profile` 로 설로\n- competition 이미지를 생성하는 경우: `competition` 로 설정\n- post 이미지를 생성하는 경우: `post` 로 설정"
          },
          "format": {
            "$ref": "#/components/schemas/TImageFormat",
            "title": "image format",
            "description": "image format."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "createdAt",
            "description": "createdAt.\n- 이미지가 생성된 시간"
          },
          "linkedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "linkedAt",
            "description": "linkedAt.\n- 이미지를 소유한 entity에 FK로 연결된 시간.\n- null 이면 연결되지 않은 이미지.\n- createdAt + 10분 이후에도 연결되지 않은 이미지는 주기적으로 삭제됩니다."
          },
          "userId": {
            "$ref": "#/components/schemas/TId",
            "title": "userId",
            "description": "userId.\n- 이미지를 생성한 계정의 userId."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "path",
          "format",
          "createdAt",
          "linkedAt",
          "userId"
        ],
        "description": "Image Interface"
      },
      "TImagePath": {
        "type": "string",
        "enum": [
          "user-profile",
          "competition",
          "post"
        ]
      },
      "TImageFormat": {
        "type": "string",
        "enum": [
          "image/jpeg",
          "image/png",
          "image/webp"
        ]
      },
      "ResponseFormGetCompetitionRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/GetCompetitionRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "GetCompetitionRes": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/ICompetitionDetail"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "ICompetitionDetail": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "title": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "대회명",
            "description": "대회명."
          },
          "address": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "대회가 열리는 위치 (도로명 주소)",
            "description": "대회가 열리는 위치 (도로명 주소)."
          },
          "competitionDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "대회 날짜",
            "description": "대회 날짜."
          },
          "registrationStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가 신청 시작일",
            "description": "참가 신청 시작일."
          },
          "registrationEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가 신청 마감일",
            "description": "참가 신청 마감일."
          },
          "refundDeadlineDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "환불 가능 기간 마감일",
            "description": "환불 가능 기간 마감일."
          },
          "soloRegistrationAdjustmentStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "단독 참가자의 부문 조정 시작일",
            "description": "단독 참가자의 부문 조정 시작일.\n- 부문에 참가자가 한 명만 있는 경우, 해당 참가자를 다른 체급이나 부문으로 조정할 수 있는 기간의 시작을 나타냅니다."
          },
          "soloRegistrationAdjustmentEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "단독 참가자의 부문 조정 마감일",
            "description": "단독 참가자의 부문 조정 마감일."
          },
          "registrationListOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가자 명단 공개일",
            "description": "참가자 명단 공개일."
          },
          "bracketOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "대진표 공개일",
            "description": "대진표 공개일."
          },
          "description": {
            "type": "string",
            "maxLength": 10000,
            "minLength": 1,
            "title": "대회 상세 정보",
            "description": "대회 상세 정보."
          },
          "isPartnership": {
            "type": "boolean",
            "title": "협약 대회 여부",
            "description": "협약 대회 여부."
          },
          "viewCount": {
            "type": "integer",
            "title": "조회수",
            "description": "조회수."
          },
          "status": {
            "$ref": "#/components/schemas/TCompetitionStatus",
            "title": "대회의 상태",
            "description": "대회의 상태.\n- ACTIVE: 활성화된 대회 유저에게 노출, 참가 신청 가능.\n- INACTIVE: 비활성화된 대회 유저에게 노출되지 않음, 참가 신청 불가능."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "updatedAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "UpdatedAt",
            "description": "UpdatedAt."
          },
          "divisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDivision"
            },
            "title": "대회 부문 정보",
            "description": "대회 부문 정보."
          },
          "earlybirdDiscountSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IEarlybirdDiscountSnapshot"
            },
            "title": "얼리버드 할인 정보",
            "description": "얼리버드 할인 정보.\n- 배열의 길이가 0이면 얼리버드 할인이 없는 대회입니다.\n- 배열의 마지막 요소가 현재 적용중인 얼리버드 할인 정보입니다."
          },
          "combinationDiscountSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICombinationDiscountSnapshot"
            },
            "title": "조합 할인 정보",
            "description": "조합 할인 정보.\n- 배열의 길이가 0이면 조합 할인이 없는 대회입니다.\n- 배열의 마지막 요소가 현재 적용중인 조합 할인 정보입니다."
          },
          "requiredAdditionalInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IRequiredAdditionalInfo"
            },
            "title": "대회 신청시 추가저으로 필요로하는 정보를 정의합니다",
            "description": "대회 신청시 추가저으로 필요로하는 정보를 정의합니다.\n- ex) 주민번호, 주소"
          },
          "competitionHostMaps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICompetitionHostMap"
            },
            "title": "대회 주최자 정보 매핑 테이블",
            "description": "대회 주최자 정보 매핑 테이블."
          },
          "competitionPosterImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICompetitionPosterImage"
            }
          }
        },
        "nullable": false,
        "required": [
          "id",
          "title",
          "address",
          "competitionDate",
          "registrationStartDate",
          "registrationEndDate",
          "refundDeadlineDate",
          "soloRegistrationAdjustmentStartDate",
          "soloRegistrationAdjustmentEndDate",
          "registrationListOpenDate",
          "bracketOpenDate",
          "description",
          "isPartnership",
          "viewCount",
          "status",
          "createdAt",
          "updatedAt",
          "divisions",
          "earlybirdDiscountSnapshots",
          "combinationDiscountSnapshots",
          "requiredAdditionalInfos",
          "competitionHostMaps",
          "competitionPosterImages"
        ]
      },
      "IDivision": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "category": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "부문 카테고리",
            "description": "부문 카테고리.\n- ex) '초등부', '중등부', '어덜트'."
          },
          "uniform": {
            "type": "string",
            "enum": [
              "GI",
              "NOGI"
            ],
            "title": "유니폼",
            "description": "유니폼."
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE",
              "MIXED"
            ],
            "title": "부문 성별",
            "description": "부문 성별."
          },
          "belt": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "주짓수벨트",
            "description": "주짓수벨트.\n- ex) '화이트', '블루', '퍼플', '브라운', '블랙'."
          },
          "weight": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Weight"
              },
              {
                "$ref": "#/components/schemas/Absolute"
              }
            ],
            "title": "체급",
            "description": "체급.\n- weight type: '-45', '+45', '-60.5', '+60.5'\n- absolute type: '-45_ABSOLUTE', '+45_ABSOLUTE', '-60.5_ABSOLUTE', '+60.5_ABSOLUTE', 'ABSOLUTE'"
          },
          "birthYearRangeStart": {
            "type": "string",
            "minLength": 4,
            "pattern": "^[0-9]{4}$",
            "title": "출생년도 범위 시작. YYYY",
            "description": "출생년도 범위 시작. YYYY."
          },
          "birthYearRangeEnd": {
            "type": "string",
            "minLength": 4,
            "pattern": "^[0-9]{4}$",
            "title": "출생년도 범위 끝. YYYY",
            "description": "출생년도 범위 끝. YYYY."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "title": "활성 상태",
            "description": "활성 상태.\n- ACTIVE: 해당 부문에 신청 가능. (USER 에게 노출됨.)\n- INACTIVE: 해당 부문에 신청 불가능. (USER 에게 노출되지 않음.)"
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "updatedAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "UpdatedAt",
            "description": "UpdatedAt."
          },
          "competitionId": {
            "$ref": "#/components/schemas/TId",
            "title": "CompetitionId",
            "description": "CompetitionId."
          },
          "priceSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPriceSnapshot"
            },
            "minItems": 1,
            "title": "가격 스냅샷",
            "description": "가격 스냅샷."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "category",
          "uniform",
          "gender",
          "belt",
          "weight",
          "birthYearRangeStart",
          "birthYearRangeEnd",
          "status",
          "createdAt",
          "updatedAt",
          "competitionId",
          "priceSnapshots"
        ]
      },
      "Weight": {
        "type": "string",
        "pattern": "^[-+]\\d{1,3}(\\.\\d{1,2})?$",
        "description": "일반 체급 타입.\n- ex) '-45', '+45', '-60.5', '+60.5'"
      },
      "Absolute": {
        "type": "string",
        "pattern": "^[-+]\\d{1,3}(\\.\\d{1,2})?_ABSOLUTE$|^ABSOLUTE$",
        "description": "앱솔루트 체급 타입.\n- ex) '-45_ABSOLUTE', '+45_ABSOLUTE', '-60.5_ABSOLUTE', '+60.5_ABSOLUTE', 'ABSOLUTE'"
      },
      "IPriceSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "price": {
            "type": "integer",
            "minimum": 0,
            "title": "price, (원)",
            "description": "price, (원)."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "divisionId": {
            "$ref": "#/components/schemas/TId",
            "title": "Division id",
            "description": "Division id."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "price",
          "createdAt",
          "divisionId"
        ]
      },
      "ICombinationDiscountSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "combinationDiscountRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICombinationDiscountRule"
            },
            "minItems": 1,
            "title": "조합 할인 규칙",
            "description": "조합 할인 규칙."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "competitionId": {
            "$ref": "#/components/schemas/TId",
            "title": "Competition id",
            "description": "Competition id."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "combinationDiscountRules",
          "createdAt",
          "competitionId"
        ]
      },
      "ICombinationDiscountRule": {
        "type": "object",
        "properties": {
          "combination": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICombinationUnit"
            },
            "title": "할인 조합",
            "description": "할인 조합.\n- ICombinationUnit들의 조합을 만족하는경우 할인금액을 적용한다."
          },
          "discountAmount": {
            "type": "number",
            "title": "할인금액",
            "description": "할인금액."
          }
        },
        "nullable": false,
        "required": [
          "combination",
          "discountAmount"
        ]
      },
      "ICombinationUnit": {
        "type": "object",
        "properties": {
          "uniformType": {
            "type": "string",
            "enum": [
              "GI",
              "NOGI"
            ],
            "title": "Uniform Type (Gi or NOGI)",
            "description": "Uniform Type (Gi or NOGI)."
          },
          "weightType": {
            "type": "string",
            "enum": [
              "ABSOLUTE",
              "WEIGHT"
            ],
            "title": "Weight Type (WEIGHT or ABSOLUTE)",
            "description": "Weight Type (WEIGHT or ABSOLUTE)."
          }
        },
        "nullable": false,
        "required": [
          "uniformType",
          "weightType"
        ]
      },
      "IRequiredAdditionalInfo": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "type": {
            "type": "string",
            "enum": [
              "ADDRESS",
              "SOCIAL_SECURITY_NUMBER"
            ],
            "description": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 512,
            "minLength": 1,
            "title": "Description",
            "description": "Description."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "deletedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "description": "DeletedAT"
          },
          "competitionId": {
            "$ref": "#/components/schemas/TId",
            "description": "Competition Id"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "type",
          "description",
          "createdAt",
          "deletedAt",
          "competitionId"
        ]
      },
      "ICompetitionHostMap": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "hostId": {
            "$ref": "#/components/schemas/TId",
            "title": "주최자 User ID",
            "description": "주최자 User ID."
          },
          "competitionId": {
            "$ref": "#/components/schemas/TId",
            "title": "주체 대회 ID",
            "description": "주체 대회 ID."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "hostId",
          "competitionId"
        ],
        "description": "대회 주최자 정보 매핑 테이블."
      },
      "CreateCompetitionReqBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "대회명",
            "description": "대회명."
          },
          "address": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "대회가 열리는 위치 (도로명 주소)",
            "description": "대회가 열리는 위치 (도로명 주소)."
          },
          "competitionDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "대회 날짜",
            "description": "대회 날짜."
          },
          "registrationStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가 신청 시작일",
            "description": "참가 신청 시작일."
          },
          "registrationEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가 신청 마감일",
            "description": "참가 신청 마감일."
          },
          "refundDeadlineDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "환불 가능 기간 마감일",
            "description": "환불 가능 기간 마감일."
          },
          "soloRegistrationAdjustmentStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "단독 참가자의 부문 조정 시작일",
            "description": "단독 참가자의 부문 조정 시작일.\n- 부문에 참가자가 한 명만 있는 경우, 해당 참가자를 다른 체급이나 부문으로 조정할 수 있는 기간의 시작을 나타냅니다."
          },
          "soloRegistrationAdjustmentEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "단독 참가자의 부문 조정 마감일",
            "description": "단독 참가자의 부문 조정 마감일."
          },
          "registrationListOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가자 명단 공개일",
            "description": "참가자 명단 공개일."
          },
          "bracketOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "대진표 공개일",
            "description": "대진표 공개일."
          },
          "description": {
            "type": "string",
            "maxLength": 10000,
            "minLength": 1,
            "title": "대회 상세 정보",
            "description": "대회 상세 정보."
          },
          "isPartnership": {
            "type": "boolean",
            "title": "협약 대회 여부",
            "description": "협약 대회 여부."
          }
        },
        "nullable": false
      },
      "ResponseFormCreateCompetitionRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateCompetitionRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreateCompetitionRes": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/ICompetitionBasicInfo"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "ICompetitionBasicInfo": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "status": {
            "$ref": "#/components/schemas/TCompetitionStatus",
            "title": "대회의 상태",
            "description": "대회의 상태.\n- ACTIVE: 활성화된 대회 유저에게 노출, 참가 신청 가능.\n- INACTIVE: 비활성화된 대회 유저에게 노출되지 않음, 참가 신청 불가능."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "updatedAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "UpdatedAt",
            "description": "UpdatedAt."
          },
          "title": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "대회명",
            "description": "대회명."
          },
          "competitionHostMaps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICompetitionHostMap"
            },
            "title": "대회 주최자 정보 매핑 테이블",
            "description": "대회 주최자 정보 매핑 테이블."
          },
          "address": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "대회가 열리는 위치 (도로명 주소)",
            "description": "대회가 열리는 위치 (도로명 주소)."
          },
          "competitionDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "대회 날짜",
            "description": "대회 날짜."
          },
          "registrationStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가 신청 시작일",
            "description": "참가 신청 시작일."
          },
          "registrationEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가 신청 마감일",
            "description": "참가 신청 마감일."
          },
          "refundDeadlineDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "환불 가능 기간 마감일",
            "description": "환불 가능 기간 마감일."
          },
          "soloRegistrationAdjustmentStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "단독 참가자의 부문 조정 시작일",
            "description": "단독 참가자의 부문 조정 시작일.\n- 부문에 참가자가 한 명만 있는 경우, 해당 참가자를 다른 체급이나 부문으로 조정할 수 있는 기간의 시작을 나타냅니다."
          },
          "soloRegistrationAdjustmentEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "단독 참가자의 부문 조정 마감일",
            "description": "단독 참가자의 부문 조정 마감일."
          },
          "registrationListOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가자 명단 공개일",
            "description": "참가자 명단 공개일."
          },
          "bracketOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "대진표 공개일",
            "description": "대진표 공개일."
          },
          "description": {
            "type": "string",
            "maxLength": 10000,
            "minLength": 1,
            "title": "대회 상세 정보",
            "description": "대회 상세 정보."
          },
          "isPartnership": {
            "type": "boolean",
            "title": "협약 대회 여부",
            "description": "협약 대회 여부."
          },
          "viewCount": {
            "type": "integer",
            "title": "조회수",
            "description": "조회수."
          },
          "competitionPosterImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICompetitionPosterImage"
            }
          }
        },
        "nullable": false,
        "required": [
          "id",
          "status",
          "createdAt",
          "updatedAt",
          "title",
          "competitionHostMaps",
          "address",
          "competitionDate",
          "registrationStartDate",
          "registrationEndDate",
          "refundDeadlineDate",
          "soloRegistrationAdjustmentStartDate",
          "soloRegistrationAdjustmentEndDate",
          "registrationListOpenDate",
          "bracketOpenDate",
          "description",
          "isPartnership",
          "viewCount",
          "competitionPosterImages"
        ]
      },
      "UpdateCompetitionReqBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "대회명",
            "description": "대회명."
          },
          "address": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "대회가 열리는 위치 (도로명 주소)",
            "description": "대회가 열리는 위치 (도로명 주소)."
          },
          "competitionDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "대회 날짜",
            "description": "대회 날짜."
          },
          "registrationStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가 신청 시작일",
            "description": "참가 신청 시작일."
          },
          "registrationEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가 신청 마감일",
            "description": "참가 신청 마감일."
          },
          "refundDeadlineDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "환불 가능 기간 마감일",
            "description": "환불 가능 기간 마감일."
          },
          "soloRegistrationAdjustmentStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "단독 참가자의 부문 조정 시작일",
            "description": "단독 참가자의 부문 조정 시작일.\n- 부문에 참가자가 한 명만 있는 경우, 해당 참가자를 다른 체급이나 부문으로 조정할 수 있는 기간의 시작을 나타냅니다."
          },
          "soloRegistrationAdjustmentEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "단독 참가자의 부문 조정 마감일",
            "description": "단독 참가자의 부문 조정 마감일."
          },
          "registrationListOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "참가자 명단 공개일",
            "description": "참가자 명단 공개일."
          },
          "bracketOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "대진표 공개일",
            "description": "대진표 공개일."
          },
          "description": {
            "type": "string",
            "maxLength": 10000,
            "minLength": 1,
            "title": "대회 상세 정보",
            "description": "대회 상세 정보."
          },
          "isPartnership": {
            "type": "boolean",
            "title": "협약 대회 여부",
            "description": "협약 대회 여부."
          }
        },
        "nullable": false
      },
      "ResponseFormUpdateCompetitionRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/UpdateCompetitionRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "UpdateCompetitionRes": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/ICompetitionDetail"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "UpdateCompetitionStatusReqBody": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "title": "대회의 상태",
            "description": "대회의 상태.\n- ACTIVE: 활성화된 대회 유저에게 노출, 참가 신청 가능.\n- INACTIVE: 비활성화된 대회 유저에게 노출되지 않음, 참가 신청 불가능."
          }
        },
        "nullable": false,
        "required": [
          "status"
        ]
      },
      "CreateDivisionsReqBody": {
        "type": "object",
        "properties": {
          "divisionPacks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDivisionPack"
            },
            "minItems": 1,
            "title": "- Division packs",
            "description": "- Division packs."
          }
        },
        "nullable": false,
        "required": [
          "divisionPacks"
        ]
      },
      "IDivisionPack": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 64,
              "minLength": 1
            },
            "minItems": 1,
            "title": "생성하고자 하는 카테고리 이름",
            "description": "생성하고자 하는 카테고리 이름.\n- ex) '초등부', '중등부', '고등부', '어덜트', '마스터'."
          },
          "uniforms": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "GI",
                "NOGI"
              ]
            },
            "minItems": 1,
            "title": "생성하고자 하는 유니폼 종류",
            "description": "생성하고자 하는 유니폼 종류.\n- ex) 'GI', 'NOGI'."
          },
          "genders": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "FEMALE",
                "MALE",
                "MIXED"
              ]
            },
            "minItems": 1,
            "title": "생성하고자 하는 성별",
            "description": "생성하고자 하는 성별.\n- ex) 'MALE', 'FEMALE', 'MIXED'."
          },
          "belts": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 64,
              "minLength": 1
            },
            "minItems": 1,
            "title": "생성하고자 하는 주짓수 벨트",
            "description": "생성하고자 하는 주짓수 벨트.\n- ex) '화이트', '블루', '퍼플', '브라운', '블랙'."
          },
          "weights": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "pattern": "^[-+]\\d{1,3}(\\.\\d{1,2})?$"
                },
                {
                  "type": "string",
                  "pattern": "^[-+]\\d{1,3}(\\.\\d{1,2})?_ABSOLUTE$|^ABSOLUTE$"
                }
              ]
            },
            "minItems": 1,
            "title": "생성하고자 하는 체급",
            "description": "생성하고자 하는 체급.\n- ex) '-40', '-45', '-50', '+50', 'ABSOLUTE'."
          },
          "birthYearRangeStart": {
            "type": "string",
            "minLength": 4,
            "pattern": "^[0-9]{4}$",
            "title": "생성하고자 하는 출생년도 범위 시작",
            "description": "생성하고자 하는 출생년도 범위 시작."
          },
          "birthYearRangeEnd": {
            "type": "string",
            "minLength": 4,
            "pattern": "^[0-9]{4}$",
            "title": "생성하고자 하는 출생년도 범위 끝",
            "description": "생성하고자 하는 출생년도 범위 끝."
          },
          "price": {
            "type": "integer",
            "minimum": 0,
            "title": "생성하고자 하는 가격",
            "description": "생성하고자 하는 가격."
          }
        },
        "nullable": false,
        "required": [
          "categories",
          "uniforms",
          "genders",
          "belts",
          "weights",
          "birthYearRangeStart",
          "birthYearRangeEnd",
          "price"
        ]
      },
      "ResponseFormCreateCompetitionDivisionsRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateCompetitionDivisionsRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreateCompetitionDivisionsRes": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/ICompetitionDetail"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "CreateEarlybirdDiscountSnapshotReqBody": {
        "type": "object",
        "properties": {
          "earlybirdStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "얼리버드 할인 시작일",
            "description": "얼리버드 할인 시작일."
          },
          "earlybirdEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "얼리버드 할인 마감일",
            "description": "얼리버드 할인 마감일."
          },
          "discountAmount": {
            "type": "integer",
            "minimum": 0,
            "title": "얼리버드 할인 가격",
            "description": "얼리버드 할인 가격.\n- ex) 10000.\n- 단위 : 원.\n- 음수 값은 허용하지 않습니다."
          }
        },
        "nullable": false,
        "required": [
          "earlybirdStartDate",
          "earlybirdEndDate",
          "discountAmount"
        ]
      },
      "ResponseFormCreateEarlybirdDiscountSnapshotRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateEarlybirdDiscountSnapshotRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreateEarlybirdDiscountSnapshotRes": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/ICompetitionDetail"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "CreateCombinationDiscountSnapshotReqBody": {
        "type": "object",
        "properties": {
          "combinationDiscountRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICombinationDiscountRule"
            },
            "minItems": 1,
            "title": "조합 할인 규칙",
            "description": "조합 할인 규칙."
          }
        },
        "nullable": false,
        "required": [
          "combinationDiscountRules"
        ]
      },
      "ResponseFormCreateCombinationDiscountSnapshotRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateCombinationDiscountSnapshotRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreateCombinationDiscountSnapshotRes": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/ICompetitionDetail"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "CreateCompetitionRequiredAdditionalInfoReqBody": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ADDRESS",
              "SOCIAL_SECURITY_NUMBER"
            ],
            "description": "Type"
          },
          "description": {
            "type": "string",
            "maxLength": 512,
            "minLength": 1,
            "title": "Description",
            "description": "Description."
          }
        },
        "nullable": false,
        "required": [
          "type",
          "description"
        ]
      },
      "ResponseFormCreateCompetitionRequiredAdditionalInfoRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateCompetitionRequiredAdditionalInfoRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreateCompetitionRequiredAdditionalInfoRes": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/ICompetitionDetail"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "UpdateRequiredAdditionalInfoReqBody": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "maxLength": 512,
            "minLength": 1,
            "title": "Description",
            "description": "Description."
          }
        },
        "nullable": false,
        "required": [
          "description"
        ]
      },
      "ResponseFormUpdateCompetitionRequiredAdditionalInfoRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/UpdateCompetitionRequiredAdditionalInfoRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "UpdateCompetitionRequiredAdditionalInfoRes": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/ICompetitionDetail"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "ResponseFormDeleteCompetitionRequiredAdditionalInfoRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/DeleteCompetitionRequiredAdditionalInfoRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "DeleteCompetitionRequiredAdditionalInfoRes": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/ICompetitionDetail"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "CreateCompetitionPosterImageReqBody": {
        "type": "object",
        "properties": {
          "imageId": {
            "type": "string",
            "format": "uuid",
            "description": "imageId\n- u-9-1 createImage 로 생성된 image의 id"
          }
        },
        "nullable": false,
        "required": [
          "imageId"
        ]
      },
      "ResponseFormCreateCompetitionPosterImageRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateCompetitionPosterImageRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreateCompetitionPosterImageRes": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/ICompetitionBasicInfo"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "ResponseFormvoid": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "CreateApplicationReqBody": {
        "type": "object",
        "properties": {
          "competitionId": {
            "type": "string",
            "format": "uuid",
            "description": "참가할 competitionId"
          },
          "applicationType": {
            "type": "string",
            "enum": [
              "PROXY",
              "SELF"
            ],
            "description": "application type"
          },
          "participationDivisionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "minItems": 1,
            "title": "- Division IDs to participate",
            "description": "- Division IDs to participate."
          },
          "playerSnapshotCreateDto": {
            "$ref": "#/components/schemas/IPlayerSnapshotCreateDto",
            "description": "player snapshot create dto"
          },
          "additionalInfoCreateDtos": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AddressInfo"
                },
                {
                  "$ref": "#/components/schemas/SocialScurityNumberInfo"
                }
              ]
            },
            "description": "additional info create dto array"
          }
        },
        "nullable": false,
        "required": [
          "competitionId",
          "applicationType",
          "participationDivisionIds",
          "playerSnapshotCreateDto"
        ]
      },
      "IPlayerSnapshotCreateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣 ]{1,64}$",
            "title": "Player name. (한글, 영문, 숫자, 공백 입력 가능합니다)",
            "description": "Player name. (한글, 영문, 숫자, 공백 입력 가능합니다)."
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^01[0-9]{9}$",
            "title": "Player phoneNumber. ex) 01012345678",
            "description": "Player phoneNumber. ex) 01012345678."
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "title": "Player gender",
            "description": "Player gender."
          },
          "birth": {
            "type": "string",
            "pattern": "^[0-9]{8}$",
            "title": "Player birth (BirtDate YYYYMMDD)",
            "description": "Player birth (BirtDate YYYYMMDD)."
          },
          "belt": {
            "type": "string",
            "enum": [
              "브라운",
              "블랙",
              "블루",
              "퍼플",
              "화이트"
            ],
            "title": "Player belt",
            "description": "Player belt."
          },
          "network": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣 ]{1,64}$",
            "title": "주짓수 네트워크. (한글, 영문, 숫자, 공백 입력 가능합니다)",
            "description": "주짓수 네트워크. (한글, 영문, 숫자, 공백 입력 가능합니다)."
          },
          "team": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣 ]{1,64}$",
            "title": "소속 팀. (한글, 영문, 숫자, 공백 입력 가능합니다)",
            "description": "소속 팀. (한글, 영문, 숫자, 공백 입력 가능합니다)."
          },
          "masterName": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣 ]{1,64}$",
            "title": "관장님 성함",
            "description": "관장님 성함."
          }
        },
        "nullable": false,
        "required": [
          "name",
          "phoneNumber",
          "gender",
          "birth",
          "belt",
          "network",
          "team",
          "masterName"
        ]
      },
      "AddressInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ADDRESS"
            ]
          },
          "value": {
            "type": "string",
            "maxLength": 512,
            "minLength": 1
          }
        },
        "nullable": false,
        "required": [
          "type",
          "value"
        ]
      },
      "SocialScurityNumberInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "SOCIAL_SECURITY_NUMBER"
            ]
          },
          "value": {
            "type": "string",
            "pattern": "^[0-9]{6}-[0-9]{7}$"
          }
        },
        "nullable": false,
        "required": [
          "type",
          "value"
        ]
      },
      "ResponseFormCreateApplicationRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateApplicationRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreateApplicationRes": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/IApplicationDetail"
          }
        },
        "nullable": false,
        "required": [
          "application"
        ]
      },
      "IApplicationDetail": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "Created at",
            "description": "Created at."
          },
          "updatedAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "Updated at",
            "description": "Updated at."
          },
          "deletedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "Deleted at",
            "description": "Deleted at."
          },
          "type": {
            "$ref": "#/components/schemas/TApplicationType",
            "title": "본인신청과 대리신청을 구별하는 type",
            "description": "본인신청과 대리신청을 구별하는 type.\n- SELF: 본인 신청\n- PROXY: 대리 신청"
          },
          "status": {
            "$ref": "#/components/schemas/TApplicationStatus",
            "title": "Status",
            "description": "Status.\n- READY: 결제 대기중\n- DONE: 결제 완료\n- CANCELED: 결제 취소"
          },
          "competitionId": {
            "$ref": "#/components/schemas/TId",
            "title": "Competition id",
            "description": "Competition id."
          },
          "userId": {
            "$ref": "#/components/schemas/TId",
            "title": "User id",
            "description": "User id."
          },
          "playerSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPlayerSnapshot"
            },
            "minItems": 1,
            "title": "Player snapshots",
            "description": "Player snapshots."
          },
          "participationDivisionInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IParticipationDivisionInfo"
            },
            "minItems": 1,
            "title": "Participation division infos",
            "description": "Participation division infos."
          },
          "additionalInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IAdditionalInfo"
            },
            "description": "Addtional infos"
          },
          "expectedPayment": {
            "$ref": "#/components/schemas/IExpectedPayment.Nullable",
            "title": "Expected payment",
            "description": "Expected payment.\nREADY 상태일 때만 조회결과에 포함됩니다."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "deletedAt",
          "type",
          "status",
          "competitionId",
          "userId",
          "playerSnapshots",
          "participationDivisionInfos",
          "additionalInfos"
        ]
      },
      "TApplicationType": {
        "type": "string",
        "enum": [
          "SELF",
          "PROXY"
        ]
      },
      "TApplicationStatus": {
        "type": "string",
        "enum": [
          "READY",
          "DONE",
          "CANCELED"
        ]
      },
      "IPlayerSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣 ]{1,64}$",
            "title": "Player name. (한글, 영문, 숫자, 공백 입력 가능합니다)",
            "description": "Player name. (한글, 영문, 숫자, 공백 입력 가능합니다)."
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "title": "Player gender",
            "description": "Player gender."
          },
          "birth": {
            "type": "string",
            "pattern": "^[0-9]{8}$",
            "title": "Player birth (BirtDate YYYYMMDD)",
            "description": "Player birth (BirtDate YYYYMMDD)."
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^01[0-9]{9}$",
            "title": "Player phoneNumber. ex) 01012345678",
            "description": "Player phoneNumber. ex) 01012345678."
          },
          "belt": {
            "type": "string",
            "enum": [
              "브라운",
              "블랙",
              "블루",
              "퍼플",
              "화이트"
            ],
            "title": "Player belt",
            "description": "Player belt."
          },
          "network": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣 ]{1,64}$",
            "title": "주짓수 네트워크. (한글, 영문, 숫자, 공백 입력 가능합니다)",
            "description": "주짓수 네트워크. (한글, 영문, 숫자, 공백 입력 가능합니다)."
          },
          "team": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣 ]{1,64}$",
            "title": "소속 팀. (한글, 영문, 숫자, 공백 입력 가능합니다)",
            "description": "소속 팀. (한글, 영문, 숫자, 공백 입력 가능합니다)."
          },
          "masterName": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣 ]{1,64}$",
            "title": "관장님 성함",
            "description": "관장님 성함."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "description": "CreatedAt"
          },
          "applicationId": {
            "$ref": "#/components/schemas/TId",
            "title": "Application id",
            "description": "Application id."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "name",
          "gender",
          "birth",
          "phoneNumber",
          "belt",
          "network",
          "team",
          "masterName",
          "createdAt",
          "applicationId"
        ]
      },
      "IParticipationDivisionInfo": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "applicationId": {
            "$ref": "#/components/schemas/TId",
            "title": "Application id",
            "description": "Application id."
          },
          "participationDivisionInfoSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IParticipationDivisionInfoSnapshot"
            },
            "minItems": 1,
            "title": "참가부문 정보 스냅샷",
            "description": "참가부문 정보 스냅샷."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "createdAt",
          "applicationId",
          "participationDivisionInfoSnapshots"
        ]
      },
      "IParticipationDivisionInfoSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "description": "CreatedAt"
          },
          "participationDivisionInfoId": {
            "$ref": "#/components/schemas/TId",
            "title": "- Participation division Info id",
            "description": "- Participation division Info id."
          },
          "participationDivisionId": {
            "$ref": "#/components/schemas/TId",
            "title": "- Division id (참가한 부문 id)",
            "description": "- Division id (참가한 부문 id)."
          },
          "division": {
            "$ref": "#/components/schemas/IDivision",
            "title": "- Division. (참가한 부문)",
            "description": "- Division. (참가한 부문)."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "createdAt",
          "participationDivisionInfoId",
          "participationDivisionId",
          "division"
        ]
      },
      "IAdditionalInfo": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "Created at",
            "description": "Created at."
          },
          "updatedAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "Updated at",
            "description": "Updated at."
          },
          "type": {
            "type": "string",
            "enum": [
              "ADDRESS",
              "SOCIAL_SECURITY_NUMBER"
            ],
            "title": "Type",
            "description": "Type."
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "Value."
          },
          "applicationId": {
            "$ref": "#/components/schemas/TId",
            "title": "Application id",
            "description": "Application id."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "type",
          "value",
          "applicationId"
        ]
      },
      "IExpectedPayment.Nullable": {
        "type": "object",
        "properties": {
          "normalAmount": {
            "type": "integer",
            "minimum": 0
          },
          "earlybirdDiscountAmount": {
            "type": "integer",
            "minimum": 0
          },
          "combinationDiscountAmount": {
            "type": "integer",
            "minimum": 0
          },
          "totalAmount": {
            "type": "integer",
            "minimum": 0
          }
        },
        "nullable": true,
        "required": [
          "normalAmount",
          "earlybirdDiscountAmount",
          "combinationDiscountAmount",
          "totalAmount"
        ]
      },
      "ResponseFormGetApplicationRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/GetApplicationRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "GetApplicationRes": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/IApplicationDetail"
          }
        },
        "nullable": false,
        "required": [
          "application"
        ]
      },
      "UpdateReadyApplicationReqBody": {
        "type": "object",
        "properties": {
          "competitionId": {
            "type": "string",
            "format": "uuid",
            "description": "참가할 competitionId"
          },
          "applicationType": {
            "type": "string",
            "enum": [
              "PROXY",
              "SELF"
            ],
            "description": "application type"
          },
          "participationDivisionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "minItems": 1,
            "title": "- Division IDs to participate",
            "description": "- Division IDs to participate."
          },
          "playerSnapshotCreateDto": {
            "$ref": "#/components/schemas/IPlayerSnapshotCreateDto",
            "description": "player snapshot create dto"
          },
          "additionalInfoCreateDtos": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AddressInfo"
                },
                {
                  "$ref": "#/components/schemas/SocialScurityNumberInfo"
                }
              ]
            },
            "description": "additional info create dto array"
          }
        },
        "nullable": false,
        "required": [
          "competitionId",
          "applicationType",
          "participationDivisionIds",
          "playerSnapshotCreateDto"
        ]
      },
      "ResponseFormUpdateReadyApplicationRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/UpdateReadyApplicationRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "UpdateReadyApplicationRes": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/IApplicationDetail"
          }
        },
        "nullable": false,
        "required": [
          "application"
        ]
      },
      "UpdateDoneApplicationReqBody": {
        "type": "object",
        "properties": {
          "participationDivisionInfoUpdateDtos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IParticipationDivisionInfoUpdateDto"
            },
            "minItems": 1,
            "title": "- Division info update data array",
            "description": "- Division info update data array."
          },
          "playerSnapshotCreateDto": {
            "$ref": "#/components/schemas/IPlayerSnapshotCreateDto",
            "description": "player snapshot create dto"
          },
          "additionalInfoUpdateDtos": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AddressInfo"
                },
                {
                  "$ref": "#/components/schemas/SocialScurityNumberInfo"
                }
              ]
            },
            "description": "additional info update dto array"
          }
        },
        "nullable": false
      },
      "IParticipationDivisionInfoUpdateDto": {
        "type": "object",
        "properties": {
          "participationDivisionInfoId": {
            "type": "string",
            "format": "uuid",
            "title": "수정하고자 하는 참가부문 정보 ID (식별자)",
            "description": "수정하고자 하는 참가부문 정보 ID (식별자)."
          },
          "newParticipationDivisionId": {
            "type": "string",
            "format": "uuid",
            "title": "새로 참가 하고자 하는 부문 ID",
            "description": "새로 참가 하고자 하는 부문 ID."
          }
        },
        "nullable": false,
        "required": [
          "participationDivisionInfoId",
          "newParticipationDivisionId"
        ]
      },
      "ResponseFormUpdateDoneApplicationRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/UpdateDoneApplicationRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "UpdateDoneApplicationRes": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/IApplicationDetail"
          }
        },
        "nullable": false,
        "required": [
          "application"
        ]
      },
      "ResponseFormGetExpectedPaymentRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/GetExpectedPaymentRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "GetExpectedPaymentRes": {
        "type": "object",
        "properties": {
          "expectedPayment": {
            "$ref": "#/components/schemas/IExpectedPayment"
          }
        },
        "nullable": false,
        "required": [
          "expectedPayment"
        ]
      },
      "IExpectedPayment": {
        "type": "object",
        "properties": {
          "normalAmount": {
            "type": "integer",
            "minimum": 0
          },
          "earlybirdDiscountAmount": {
            "type": "integer",
            "minimum": 0
          },
          "combinationDiscountAmount": {
            "type": "integer",
            "minimum": 0
          },
          "totalAmount": {
            "type": "integer",
            "minimum": 0
          }
        },
        "nullable": false,
        "required": [
          "normalAmount",
          "earlybirdDiscountAmount",
          "combinationDiscountAmount",
          "totalAmount"
        ]
      },
      "FindApplicationsQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "maximum": 30,
            "minimum": 1,
            "default": 10,
            "title": "Number of items per page",
            "description": "Number of items per page."
          },
          "status": {
            "type": "string",
            "enum": [
              "CANCELED",
              "DONE",
              "READY"
            ],
            "title": "application status filter option",
            "description": "application status filter option.\nundefined 라면 모든 상태의 application을 조회합니다."
          }
        },
        "nullable": false
      },
      "ResponseFormFindApplicationsRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/FindApplicationsRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "FindApplicationsRes": {
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "number",
            "title": "Next page number",
            "description": "Next page number.\n다음 페이지가 존재하지 않으면 undefined."
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IApplicationDetail"
            }
          }
        },
        "nullable": false,
        "required": [
          "applications"
        ]
      },
      "CreatePostReqBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Post title",
            "description": "Post title."
          },
          "category": {
            "type": "string",
            "enum": [
              "COMPETITION",
              "FREE",
              "OPEN_MAT",
              "SEMINAR"
            ],
            "title": "Post category",
            "description": "Post category.\n- FREE: 자유 게시판.\n- COMPETITION: 대회 게시판.\n- SEMINAR: 세미나 게시판.\n- OPEN_MAT: 오픈 매트 게시판."
          },
          "body": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Post body",
            "description": "Post body."
          },
          "imageIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "maxItems": 5,
            "title": "Image Ids",
            "description": "Image Ids.\n- 이미지는 최대 5개까지 등록 가능합니다."
          }
        },
        "nullable": false,
        "required": [
          "title",
          "category",
          "body"
        ]
      },
      "ResponseFormCreatePostRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreatePostRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreatePostRes": {
        "type": "object",
        "properties": {
          "post": {
            "$ref": "#/components/schemas/IPostDetail"
          }
        },
        "nullable": false,
        "required": [
          "post"
        ]
      },
      "IPostDetail": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "status": {
            "$ref": "#/components/schemas/TPostStatus",
            "title": "Post status",
            "description": "Post status."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "viewCount": {
            "type": "integer",
            "title": "Post view count",
            "description": "Post view count."
          },
          "category": {
            "$ref": "#/components/schemas/TPostCategory",
            "title": "Post category",
            "description": "Post category.\n- FREE: 자유 게시판.\n- COMPETITION: 대회 게시판.\n- SEMINAR: 세미나 게시판.\n- OPEN_MAT: 오픈 매트 게시판."
          },
          "userId": {
            "$ref": "#/components/schemas/TId",
            "title": "Post writer",
            "description": "Post writer."
          },
          "deletedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "DeletedAt",
            "description": "DeletedAt."
          },
          "postSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPostSnapshot"
            }
          },
          "likeCount": {
            "type": "number"
          },
          "commentCount": {
            "type": "number"
          },
          "userLiked": {
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "status",
          "createdAt",
          "viewCount",
          "category",
          "userId",
          "deletedAt",
          "postSnapshots"
        ]
      },
      "TPostStatus": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ]
      },
      "TPostCategory": {
        "type": "string",
        "enum": [
          "FREE",
          "COMPETITION",
          "SEMINAR",
          "OPEN_MAT"
        ]
      },
      "IPostSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "postId": {
            "$ref": "#/components/schemas/TId",
            "title": "Post Id",
            "description": "Post Id."
          },
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Post title",
            "description": "Post title."
          },
          "body": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Post body",
            "description": "Post body."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "postSnapshotImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPostSnapshotImage"
            },
            "maxItems": 5,
            "title": "PostSnapshotImages",
            "description": "PostSnapshotImages."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "postId",
          "title",
          "body",
          "createdAt",
          "postSnapshotImages"
        ]
      },
      "IPostSnapshotImage": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "postSnapshotId": {
            "$ref": "#/components/schemas/TId",
            "description": "postSnapshotId"
          },
          "imageId": {
            "$ref": "#/components/schemas/TId",
            "description": "imageId\n- u-9-1 createImage 로 생성된 image의 id"
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "description": "createdAt"
          },
          "image": {
            "$ref": "#/components/schemas/IImage"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "postSnapshotId",
          "imageId",
          "createdAt",
          "image"
        ]
      },
      "FindPostsReqQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "maximum": 30,
            "minimum": 1,
            "default": 10,
            "title": "Number of items per page",
            "description": "Number of items per page."
          },
          "sortOption": {
            "type": "string",
            "enum": [
              "조회순",
              "최신순"
            ],
            "title": "정렬 옵션",
            "description": "정렬 옵션.\n- 최신순: 최신 게시물이 위로 올라오는 순서.\n- 조회순: 조회수가 높은 게시물이 위로 올라오는 순서."
          },
          "categoryFilters": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "COMPETITION",
                "FREE",
                "OPEN_MAT",
                "POPULAR",
                "SEMINAR"
              ]
            },
            "title": "카테고리 필터",
            "description": "카테고리 필터.\n- POPULAR 옵션을 선택하면 다른 카테고리 옵션은 무시됩니다.\n- FREE, COMPETITION, SEMINAR, OPEN_MAT 옵션들은 동시에 여러 개 선택 가능합니다.\n- categoryFilters를 요청하지 않으면 모든 카테고리에서 게시물을 조회합니다.\n\ncategofyFilters:\n- POPULAR: 인기 게시판, 좋아요 수가 10개 이상인 게시물만 조회.\n- FREE: 자유 게시판.\n- COMPETITION: 대회 게시판.\n- SEMINAR: 세미나 게시판.\n- OPEN_MAT: 오픈 매트 게시판."
          }
        },
        "nullable": false
      },
      "ResponseFormFindPostsRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/FindPostsRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "FindPostsRes": {
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "number",
            "title": "Next page number",
            "description": "Next page number.\n다음 페이지가 존재하지 않으면 undefined."
          },
          "posts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPostDetail"
            }
          }
        },
        "nullable": false,
        "required": [
          "posts"
        ]
      },
      "ResponseFormGetPostRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/GetPostRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "GetPostRes": {
        "type": "object",
        "properties": {
          "post": {
            "$ref": "#/components/schemas/IPostDetail"
          }
        },
        "nullable": false,
        "required": [
          "post"
        ]
      },
      "UpdatePostReqBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Post title",
            "description": "Post title."
          },
          "body": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Post body",
            "description": "Post body."
          },
          "imageIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "maxItems": 5,
            "title": "Image Ids",
            "description": "Image Ids.\n- 이미지는 최대 5개까지 등록 가능합니다."
          }
        },
        "nullable": false,
        "required": [
          "title",
          "body"
        ]
      },
      "ResponseFormUpdatePostRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/UpdatePostRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "UpdatePostRes": {
        "type": "object",
        "properties": {
          "post": {
            "$ref": "#/components/schemas/IPostDetail"
          }
        },
        "nullable": false,
        "required": [
          "post"
        ]
      },
      "CreatePostReportReqBody": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "INAPPROPRIATE",
              "SPAM"
            ],
            "description": "Report Type"
          },
          "reason": {
            "type": "string",
            "maxLength": 100,
            "description": "Report Reason"
          }
        },
        "nullable": false,
        "required": [
          "type",
          "reason"
        ]
      },
      "CreateCommentReqBody": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "title": "Comment body",
            "description": "Comment body."
          }
        },
        "nullable": false,
        "required": [
          "body"
        ]
      },
      "ResponseFormCreateCommentRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateCommentRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreateCommentRes": {
        "type": "object",
        "properties": {
          "comment": {
            "$ref": "#/components/schemas/ICommentDetail"
          }
        },
        "nullable": false,
        "required": [
          "comment"
        ]
      },
      "ICommentDetail": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "status": {
            "$ref": "#/components/schemas/TCommentStatus",
            "title": "Comment status",
            "description": "Comment status."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          },
          "userId": {
            "$ref": "#/components/schemas/TId",
            "title": "Comment writer",
            "description": "Comment writer."
          },
          "postId": {
            "$ref": "#/components/schemas/TId",
            "title": "PostId",
            "description": "PostId."
          },
          "deletedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            ],
            "title": "DeletedAt",
            "description": "DeletedAt."
          },
          "likeCount": {
            "type": "number"
          },
          "userLiked": {
            "type": "boolean"
          },
          "parentId": {
            "$ref": "#/components/schemas/TId.Nullable",
            "title": "Comment parent",
            "description": "Comment parent."
          },
          "commentSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICommentSnapshot"
            }
          }
        },
        "nullable": false,
        "required": [
          "id",
          "status",
          "createdAt",
          "userId",
          "postId",
          "deletedAt",
          "parentId",
          "commentSnapshots"
        ]
      },
      "TCommentStatus": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ]
      },
      "TId.Nullable": {
        "type": "string",
        "format": "uuid",
        "description": "UUID v7."
      },
      "ICommentSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/TId",
            "title": "UUID v7",
            "description": "UUID v7."
          },
          "commentId": {
            "$ref": "#/components/schemas/TId",
            "title": "Comment Id",
            "description": "Comment Id."
          },
          "body": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "title": "Comment body",
            "description": "Comment body."
          },
          "createdAt": {
            "$ref": "#/components/schemas/TDateOrStringDate",
            "title": "CreatedAt",
            "description": "CreatedAt."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "commentId",
          "body",
          "createdAt"
        ]
      },
      "CreateCommentReplyReqBody": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "title": "Comment body",
            "description": "Comment body."
          }
        },
        "nullable": false,
        "required": [
          "body"
        ]
      },
      "ResponseFormCreateCommentReplyRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateCommentReplyRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreateCommentReplyRes": {
        "type": "object",
        "properties": {
          "comment": {
            "$ref": "#/components/schemas/ICommentDetail"
          }
        },
        "nullable": false,
        "required": [
          "comment"
        ]
      },
      "FindCommentsReqQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "maximum": 30,
            "minimum": 1,
            "default": 10,
            "title": "Number of items per page",
            "description": "Number of items per page."
          }
        },
        "nullable": false
      },
      "ResponseFormFindCommentsRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/FindCommentsRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "FindCommentsRes": {
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "number",
            "title": "Next page number",
            "description": "Next page number.\n다음 페이지가 존재하지 않으면 undefined."
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICommentDetail"
            }
          }
        },
        "nullable": false,
        "required": [
          "comments"
        ]
      },
      "FindRepliesReqQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "title": "Page number",
            "description": "Page number."
          },
          "limit": {
            "type": "integer",
            "maximum": 30,
            "minimum": 1,
            "default": 10,
            "title": "Number of items per page",
            "description": "Number of items per page."
          }
        },
        "nullable": false
      },
      "UpdateCommentReqBody": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 1,
            "title": "Comment body",
            "description": "Comment body."
          }
        },
        "nullable": false,
        "required": [
          "body"
        ]
      },
      "ResponseFormUpdateCommentRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/UpdateCommentRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "UpdateCommentRes": {
        "type": "object",
        "properties": {
          "comment": {
            "$ref": "#/components/schemas/ICommentDetail"
          }
        },
        "nullable": false,
        "required": [
          "comment"
        ]
      },
      "CreateCommentReportReqBody": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "INAPPROPRIATE",
              "SPAM"
            ],
            "description": "Report Type"
          },
          "reason": {
            "type": "string",
            "maxLength": 100,
            "description": "Report Reason"
          }
        },
        "nullable": false,
        "required": [
          "type",
          "reason"
        ]
      },
      "CreateImageReqBody": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "enum": [
              "image/jpeg",
              "image/png",
              "image/webp"
            ]
          },
          "path": {
            "type": "string",
            "enum": [
              "competition",
              "post",
              "user-profile"
            ]
          }
        },
        "nullable": false,
        "required": [
          "format",
          "path"
        ]
      },
      "ResponseFormCreateImageRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateImageRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreateImageRes": {
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/IImage"
          },
          "presignedPost": {
            "$ref": "#/components/schemas/TPresignedPost"
          }
        },
        "nullable": false,
        "required": [
          "image",
          "presignedPost"
        ]
      },
      "TPresignedPost": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "fields": {
            "$ref": "#/components/schemas/Recordstringstring"
          }
        },
        "nullable": false,
        "required": [
          "url",
          "fields"
        ],
        "description": "Presigned Post\n\nurl: The URL to which the file should be uploaded.\n- 클라이언트는 이 URL로 파일을 업로드합니다. 이 URL은 S3 버킷이나 S3 호환 스토리지(MinIO 등)의 엔드포인트를 포함합니다.\n- 예를 들어, 클라이언트는 이 URL을 사용하여 `fetch`나 `axios` 등의 HTTP 클라이언트 라이브러리를 통해 파일을 업로드할 수 있습니다.\n\n\nfields: A set of fields that must be included in the form-data when uploading the file.\n- 클라이언트는 파일 업로드 요청 시 이 필드들을 포함해야 합니다. 이 필드들은 presigned POST 요청의 조건을 만족시키기 위해 필요합니다.\n- 클라이언트는 `FormData` 객체를 생성하고, 각 필드를 `FormData`에 추가한 후, 파일과 함께 서버로 전송합니다.\n- 예시:\n```javascript\nconst formData = new FormData();\nObject.entries(fields).forEach(([key, value]) => {\n  formData.append(key, value);\n});\nformData.append('file', file);\n\nconst response = await fetch(url, {\n  method: 'POST',\n  body: formData,\n});"
      },
      "Recordstringstring": {
        "type": "object",
        "properties": {},
        "nullable": false,
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "type": "string"
        }
      },
      "CreateUserProfileImagePresignedPostReqBody": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "enum": [
              "image/jpeg",
              "image/png",
              "image/webp"
            ]
          }
        },
        "nullable": false,
        "required": [
          "format"
        ]
      },
      "ResponseFormCreateUserProfileImagePresignedPostRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateUserProfileImagePresignedPostRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code",
          "result"
        ]
      },
      "CreateUserProfileImagePresignedPostRes": {
        "type": "object",
        "properties": {
          "presignedPost": {
            "$ref": "#/components/schemas/TPresignedPost"
          }
        },
        "nullable": false,
        "required": [
          "presignedPost"
        ]
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}