{
  "openapi": "3.0.1",
  "servers": [
    {
      "url": "http://localhost:3001",
      "description": "Local Server"
    }
  ],
  "info": {
    "version": "0.0.1",
    "title": "najuha-v2-be",
    "description": "",
    "license": {
      "name": "UNLICENSED"
    }
  },
  "paths": {
    "/api-conventions/auth-guard": {
      "get": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "x-nestia-encrypted": false
          },
          "1000": {
            "description": "AUTH_ACCESS_TOKEN_MISSING",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_ACCESS_TOKEN_MISSING"
                }
              }
            }
          },
          "1001": {
            "description": "AUTH_ACCESS_TOKEN_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_ACCESS_TOKEN_UNAUTHORIZED"
                }
              }
            }
          },
          "1003": {
            "description": "AUTH_LEVEL_FORBIDDEN",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_LEVEL_FORBIDDEN"
                }
              }
            }
          }
        },
        "summary": "1 auth guard",
        "description": "1 auth guard.\n- Role Based Access Control (RBAC) 에 따라 권한이 없을 때 에러\n\nUserRoleLevel: PUBLIC, TEMPORARY_USER, USER, ADMIN\n- PUBLIC: accessToken 없이 호출 가능\n- TEMPORARY_USER: 회원가입이 완료되지 않은 사용료\n- USER: 회원가입이 완료된 사용자\n- ADMIN: 관리자",
        "x-nestia-namespace": "api-conventions.auth-guard.auth",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/api-conventions/user-api-vs-admin-api": {
      "get": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "x-nestia-encrypted": false
          }
        },
        "summary": "2 user api vs admin api",
        "description": "2 user api vs admin api.\n\nuser api 비회원,사용자, 대회사 등이 사용하는 api 입니다.\n- endpoint: /user/*\n- RoleLevel: PUBLIC, TEMPORARY_USER, USER\n\nadmin api 관리자가 사용하는 api 입니다.\n- endpoint: /admin/*\n- RoleLevel: ADMIN",
        "x-nestia-namespace": "api-conventions.user-api-vs-admin-api.userApiVsAdminApi",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/api-conventions/find-vs-get": {
      "get": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "x-nestia-encrypted": false
          }
        },
        "summary": "3 find vs get",
        "description": "3 find vs get.\n- find: 조회 대상이 존재하지 않을 때 null 혹은 빈 배열을 반환\n- get: 조회 대상이 존재하지 않을 때 에러 발생",
        "x-nestia-namespace": "api-conventions.find-vs-get.findVsGet",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/api-conventions/update": {
      "get": {
        "tags": [
          "api-conventions"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "x-nestia-encrypted": false
          }
        },
        "summary": "4 update",
        "description": "4 update.\n- 업데이트 하려는 대상이 존재하지 않을 때 에러 발생",
        "x-nestia-namespace": "api-conventions.update.update",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "api-conventions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/auth/sns-login": {
      "post": {
        "tags": [
          "u-1 auth"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnsLoginReqDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "accessToken and refreshToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormAuthTokensResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "2000": {
            "description": "SNS_AUTH_NOT_SUPPORTED_SNS_PROVIDER",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNS_AUTH_NOT_SUPPORTED_SNS_PROVIDER"
                }
              }
            }
          },
          "2001": {
            "description": "SNS_AUTH_KAKAO_LOGIN_FAIL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNS_AUTH_KAKAO_LOGIN_FAIL"
                }
              }
            }
          },
          "2002": {
            "description": "SNS_AUTH_NAVER_LOGIN_FAIL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNS_AUTH_NAVER_LOGIN_FAIL"
                }
              }
            }
          },
          "2003": {
            "description": "SNS_AUTH_GOOGLE_LOGIN_FAIL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SNS_AUTH_GOOGLE_LOGIN_FAIL"
                }
              }
            }
          }
        },
        "summary": "u-1-1 auth sns login",
        "description": "u-1-1 auth sns login.\n- RoleLevel: PUBLIC",
        "x-nestia-namespace": "user.auth.sns-login.snsLogin",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-1 auth",
                "kind": "text"
              }
            ]
          },
          {
            "name": "return",
            "text": [
              {
                "text": "accessToken and refreshToken",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/auth/token": {
      "post": {
        "tags": [
          "u-1 auth"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenReqDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "accessToken and refreshToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormAuthTokensResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "1002": {
            "description": "AUTH_REFRESH_TOKEN_UNAUTHORIZED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_REFRESH_TOKEN_UNAUTHORIZED"
                }
              }
            }
          }
        },
        "summary": "u-1-2 auth toekn refresh",
        "description": "u-1-2 auth toekn refresh.\n- RoleLevel: PUBLIC",
        "x-nestia-namespace": "user.auth.token.refreshToken",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-1 auth",
                "kind": "text"
              }
            ]
          },
          {
            "name": "return",
            "text": [
              {
                "text": "accessToken and refreshToken",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/auth/acquire-admin-role": {
      "patch": {
        "tags": [
          "u-1 auth"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "accessToken and refreshToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormAuthTokensResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "404": {
            "description": "ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ENTITY_NOT_FOUND"
                }
              }
            }
          },
          "1004": {
            "description": "AUTH_UNREGISTERED_ADMIN_CREDENTIALS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AUTH_UNREGISTERED_ADMIN_CREDENTIALS"
                }
              }
            }
          }
        },
        "summary": "u-1-3 auth acquire admin role",
        "description": "u-1-3 auth acquire admin role.\n- RoleLevel: USER\n- 관리자로 등록되어있는 유저를 관리자 역할로 변경합니다.\n- ADMIN 역할을 가진 accessToken 과 refreshToken 을 발급합니다.",
        "x-nestia-namespace": "user.auth.acquire-admin-role.aqureAdminRole",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-1 auth",
                "kind": "text"
              }
            ]
          },
          {
            "name": "return",
            "text": [
              {
                "text": "accessToken and refreshToken",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/user/register/users/me": {
      "get": {
        "tags": [
          "u-2 register"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormTemporaryUserResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "404": {
            "description": "ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ENTITY_NOT_FOUND"
                }
              }
            }
          }
        },
        "summary": "u-2-1 get temporary user",
        "description": "u-2-1 get temporary user.\n- RoleLevel: TEMPORARY_USER.",
        "x-nestia-namespace": "user.register.users.me.getTemporaryUser",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-2 register",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "user",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/register/users/{nickname}/is-duplicated": {
      "get": {
        "tags": [
          "u-2 register"
        ],
        "parameters": [
          {
            "name": "nickname",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "닉네임",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormIsDuplicatedNicknameResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-2-2 check duplicated nickname",
        "description": "u-2-2 check duplicated nickname.\n- RoleLevel: TEMPORARY_USER.\n- 닉네임이 중복되면 true, 중복되지 않으면 false를 반환.\n- 본인이 사용중인 닉네임이면 false를 반환.\n- 이미 사용중인 닉네임이면 true를 반환.",
        "x-nestia-namespace": "user.register.users.is-duplicated.isDuplicateNickname",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-2 register",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "nickname",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "닉네임",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "user",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/register/phone-number/auth-code": {
      "post": {
        "tags": [
          "u-2 register"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPhoneNumberReqDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "void",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormSendPhoneNumberAuthCodeResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-2-3 send auth code to phone number",
        "description": "u-2-3 send auth code to phone number.\n- RoleLevel: TEMPORARY_USER.\n- 전화번호로 인증코드를 전송한다.",
        "x-nestia-namespace": "user.register.phone-number.auth-code.sendPhoneNumberAuthCode",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-2 register",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/register/phone-number/auth-code/confirm": {
      "post": {
        "tags": [
          "u-2 register"
        ],
        "parameters": [],
        "requestBody": {
          "description": "confirmAuthCodeReqDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/confirmAuthCodeReqDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "true or false",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormConfirmedAuthCodeResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "404": {
            "description": "ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ENTITY_NOT_FOUND"
                }
              }
            }
          }
        },
        "summary": "u-2-4 confirm auth code",
        "description": "u-2-4 confirm auth code.\n- RoleLevel: TEMPORARY_USER.\n- 전화번호로 전송된 인증코드를 확인한다.\n- 인증성공시 User의 phoneNumber를 업데이트한다.\n- 인증성공시 true, 실패시 false를 반환한다.",
        "x-nestia-namespace": "user.register.phone-number.auth-code.confirm.confirmAuthCode",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-2 register",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "dto",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "confirmAuthCodeReqDto",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "true or false",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/register": {
      "patch": {
        "tags": [
          "u-2 register"
        ],
        "parameters": [],
        "requestBody": {
          "description": "RegisterReqDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterReqDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "accessToken & refreshToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormAuthTokensResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "404": {
            "description": "ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ENTITY_NOT_FOUND"
                }
              }
            }
          },
          "3000": {
            "description": "REGISTER_NICKNAME_DUPLICATED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/REGISTER_NICKNAME_DUPLICATED"
                }
              }
            }
          },
          "3002": {
            "description": "REGISTER_POLICY_CONSENT_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/REGISTER_POLICY_CONSENT_REQUIRED"
                }
              }
            }
          },
          "3003": {
            "description": "REGISTER_PHONE_NUMBER_REQUIRED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/REGISTER_PHONE_NUMBER_REQUIRED"
                }
              }
            }
          }
        },
        "summary": "u-2-5 register user",
        "description": "u-2-5 register user.\n- RoleLevel: TEMPORARY_USER.\n- 유저 정보를 업데이트하고, USER 레벨로 업데이트한다.\n- USER 레벨로 업데이트된 accessToken, refreshToken을 반환한다.",
        "x-nestia-namespace": "user.register.registerUser",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-2 register",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "dto",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "RegisterReqDto",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "accessToken & refreshToken",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/user/users": {
      "post": {
        "tags": [
          "u-3 users"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserReqDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "created user info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUserResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-3-1 create user",
        "description": "u-3-1 create user. // TODO: api 삭제 예정(유저 생성은 내부적으로만 사용)).\n- RoleLevel: USER.",
        "x-nestia-namespace": "user.users.postUser",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-3 users",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "created user info",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "patch": {
        "tags": [
          "u-3 users"
        ],
        "parameters": [],
        "requestBody": {
          "description": "UpdateUserReqDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialPickIUsernamegenderbirthnicknamebelt"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "updated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUserResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "404": {
            "description": "ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ENTITY_NOT_FOUND"
                }
              }
            }
          }
        },
        "summary": "u-3-2 update user",
        "description": "u-3-2 update user.\n- RoleLevel: USER.",
        "x-nestia-namespace": "user.users.patchUser",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-3 users",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "dto",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "UpdateUserReqDto",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "updated user",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/user/users/me": {
      "get": {
        "tags": [
          "u-3 users"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUserResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          },
          "404": {
            "description": "ENTITY_NOT_FOUND",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ENTITY_NOT_FOUND"
                }
              }
            }
          }
        },
        "summary": "u-3-3 get me",
        "description": "u-3-3 get me.\n- RoleLevel: USER.",
        "x-nestia-namespace": "user.users.me.getMe",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-3 users",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "user",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/policy/recent": {
      "get": {
        "tags": [
          "u-4 policy"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "recent policies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindPoliciesResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-4-1 find all types of recent policies",
        "description": "u-4-1 find all types of recent policies.\n- RoleLevel: TEMPORARY_USER.\n- 가장 최근에 등록된 모든 타입의 약관을 가져옵니다.",
        "x-nestia-namespace": "user.policy.recent.findAllRecentPolicies",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "recent policies",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/policy/{id}": {
      "get": {
        "tags": [
          "u-4 policy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "number"
            },
            "description": "policy id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "policy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindPolicyResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-4-2 find policy by id",
        "description": "u-4-2 find policy by id.\n- RoleLevel: TEMPORARY_USER.",
        "x-nestia-namespace": "user.policy.findPolicy",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "id",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "policy id",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "policy",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/admin/policy": {
      "post": {
        "tags": [
          "a-4 policy"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyReqDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "created policy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormPolicyResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-4-1 create policy",
        "description": "a-4-1 create policy.\n- RoleLevel: ADMIN.",
        "x-nestia-namespace": "admin.policy.postPolicy",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "created policy",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "get": {
        "tags": [
          "a-4 policy"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindPoliciesReqDto"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "policies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindPoliciesResDto"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-4-1 find policies",
        "description": "a-4-1 find policies.\n- RoleLevel: ADMIN.",
        "x-nestia-namespace": "admin.policy.findPolicies",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-4 policy",
                "kind": "text"
              }
            ]
          },
          {
            "name": "param",
            "text": [
              {
                "text": "type",
                "kind": "parameterName"
              },
              {
                "text": " ",
                "kind": "space"
              },
              {
                "text": "policy type",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "policies",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/competitions": {
      "get": {
        "tags": [
          "u-5 competitions"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindCompetitionsReqQuery"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "competitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindCompetitionsRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-5-1 find competitions",
        "description": "u-5-1 find competitions.\n- RoleLevel: USER.\n- ACTIVE 상태인 competition 들을 조회합니다.\n\nQuery: FindCompetitionsReqQuery\n- pageParam: 현제 페이지 번호입니다. 최초 요청 시에는 0을 사용합니다.\n- limitParam: 한페이지에 표시할 데이터 갯수. 요청하지 않을시 10을 기본값으로 사용.\n- dateFilter: 대회 날짜를 기준으로 필터링합니다. ex) '2023-04'.\n- locationFilter: 대회가 열리는 위치로 필터링합니다. ex) 서울, 부산, 인천, 대구, 대전, 광주, 울산, 세종, 경기, 충북, 충남, 전남, 경북, 경남, 강원, 전북, 제주.\n- selectFilter: 태그를 기준으로 필터링합니다. ex) ['간편결제', '얼리버드', '신청가능', '단독출전조정'].\n- sortOption: 대회를 정렬하는 옵션입니다. ex) '일자순', '조회순', '마감임박순'.",
        "x-nestia-namespace": "user.competitions.findCompetitions",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "competitions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/user/competitions/{competitionId}": {
      "get": {
        "tags": [
          "u-5 competitions"
        ],
        "parameters": [
          {
            "name": "competitionId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "competition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormGetCompetitionRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-5-2 get competition",
        "description": "u-5-2 get competition.\n- RoleLevel: USER.\n- ACTIVE 상태인 competition 을 조회합니다.",
        "x-nestia-namespace": "user.competitions.getCompetition",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "competition",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/admin/competitions": {
      "post": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ICompetition.CreateDto"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "created competition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateCompetitionRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-1 create competition",
        "description": "a-5-1 create competition.\n- RoleLevel: ADMIN.",
        "x-nestia-namespace": "admin.competitions.createCompetition",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "created competition",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      },
      "get": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/FindCompetitionsReqQuery"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "competitions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormFindCompetitionsRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-2 find competitions",
        "description": "a-5-2 find competitions.\n- RoleLevel: ADMIN.\n- ACTIVE, INACTIVE 상태인 competition 들을 조회합니다.\n\nQuery: FindCompetitionsReqQuery\n- pageParam: 현제 페이지 번호입니다. 최초 요청 시에는 0을 사용합니다.\n- limitParam: 한페이지에 표시할 데이터 갯수. 요청하지 않을시 10을 기본값으로 사용.\n- dateFilter: 대회 날짜를 기준으로 필터링합니다. ex) '2023-04'.\n- locationFilter: 대회가 열리는 위치로 필터링합니다. ex) 서울, 부산, 인천, 대구, 대전, 광주, 울산, 세종, 경기, 충북, 충남, 전남, 경북, 경남, 강원, 전북, 제주.\n- selectFilter: 태그를 기준으로 필터링합니다. ex) ['간편결제', '얼리버드', '신청가능', '단독출전조정'].\n- sortOption: 대회를 정렬하는 옵션입니다. ex) '일자순', '조회순', '마감임박순'.",
        "x-nestia-namespace": "admin.competitions.findCompetitions",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "competitions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    },
    "/admin/competitions/{id}": {
      "get": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "competition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormGetCompetitionRet"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-3 get competition",
        "description": "a-5-3 get competition.\n- RoleLevel: ADMIN.\n- ACTIVE, INACTIVE 상태인 competition 을 조회합니다.",
        "x-nestia-namespace": "admin.competitions.findCompetition",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "competition",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      },
      "patch": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompetitionReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "updated competition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUpdateCompetitionRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-4 update competition",
        "description": "a-5-4 update competition.\n- RoleLevel: ADMIN.",
        "x-nestia-namespace": "admin.competitions.updateCompetition",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "updated competition",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/admin/competitions/{id}/status": {
      "patch": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompetitionStatusReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "updated competition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUpdateCompetitionRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-5 update competition status",
        "description": "a-5-5 update competition status.\n- RoleLevel: ADMIN.",
        "x-nestia-namespace": "admin.competitions.status.updateCompetitionStatus",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "updated competition",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/admin/competitions/{id}/divisions": {
      "post": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDivisionsReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "created divisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateDivisionsRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-6 create divisions",
        "description": "a-5-6 create divisions.\n- RoleLevel: ADMIN.",
        "x-nestia-namespace": "admin.competitions.divisions.createDivisions",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "created divisions",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/admin/competitions/{id}/earlybird-discount-snapshots": {
      "post": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PickIEarlybirdDiscountSnapshotearlybirdStartDateearlybirdEndDatediscountAmount"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "created earlybird discount snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateEarlybirdDiscountSnapshotRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-7 create earlybird discount snapshot",
        "description": "a-5-7 create earlybird discount snapshot.\n- RoleLevel: ADMIN.",
        "x-nestia-namespace": "admin.competitions.earlybird-discount-snapshots.createEarlybirdDiscountSnapshot",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "created earlybird discount snapshot",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/admin/competitions/{id}/combination-discount-snapshots": {
      "post": {
        "tags": [
          "a-5 competitions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PickICombinationDiscountSnapshotcombinationDiscountRules"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "created combination discount snapshot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateCombinationDiscountSnapshotRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "a-5-8 create combination discount snapshot",
        "description": "a-5-8 create combination discount snapshot.\n- RoleLevel: ADMIN.",
        "x-nestia-namespace": "admin.competitions.combination-discount-snapshots.createCombinationDiscountSnapshot",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "a-5 competitions",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "created combination discount snapshot",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/applications": {
      "post": {
        "tags": [
          "u-6 applications"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormCreateApplicationRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-6-1 create application",
        "description": "u-6-1 create application.\n- RoleLevel: USER.",
        "x-nestia-namespace": "user.applications.createCompetitionApplication",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-6 applications",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "application",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "POST"
      }
    },
    "/user/applications/{applicationId}": {
      "get": {
        "tags": [
          "u-6 applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormGetApplicationRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-6-2 get application",
        "description": "u-6-2 get application.\n- RoleLevel: USER.",
        "x-nestia-namespace": "user.applications.getCompetitionApplication",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-6 applications",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "application",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      },
      "delete": {
        "tags": [
          "u-6 applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "void",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormvoid"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-6-5 delete application",
        "description": "u-6-5 delete application.\n- RoleLevel: USER.",
        "x-nestia-namespace": "user.applications.deleteCompetitionApplication",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-6 applications",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "void",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "DELETE"
      }
    },
    "/user/applications/{applicationId}/ready": {
      "patch": {
        "tags": [
          "u-6 applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReadyApplicationReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUpdateReadyApplicationRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-6-3 update ready status application",
        "description": "u-6-3 update ready status application.\n- RoleLevel: USER.",
        "x-nestia-namespace": "user.applications.ready.updateCompetitionApplication",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-6 applications",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "application",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/user/applications/{applicationId}/done": {
      "patch": {
        "tags": [
          "u-6 applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDoneApplicationReqBody"
              }
            }
          },
          "required": true,
          "x-nestia-encrypted": false
        },
        "responses": {
          "201": {
            "description": "application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormUpdateDoneApplicationRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-6-4 update done status application",
        "description": "u-6-4 update done status application.\n- RoleLevel: USER.",
        "x-nestia-namespace": "user.applications.done.updateDoneCompetitionApplication",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-6 applications",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "application",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "PATCH"
      }
    },
    "/user/applications/{applicationId}/expected-payment": {
      "get": {
        "tags": [
          "u-6 applications"
        ],
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "expected payment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFormGetExpectedPaymentRes"
                }
              }
            },
            "x-nestia-encrypted": false
          }
        },
        "summary": "u-6-6 get expected payment",
        "description": "u-6-6 get expected payment.\n- RoleLevel: USER.",
        "x-nestia-namespace": "user.applications.expected-payment.getExpectedPayment",
        "x-nestia-jsDocTags": [
          {
            "name": "tag",
            "text": [
              {
                "text": "u-6 applications",
                "kind": "text"
              }
            ]
          },
          {
            "name": "returns",
            "text": [
              {
                "text": "expected payment",
                "kind": "text"
              }
            ]
          }
        ],
        "x-nestia-method": "GET"
      }
    }
  },
  "components": {
    "schemas": {
      "AUTH_ACCESS_TOKEN_MISSING": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1000
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "accssToken이 없습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "result"
        ],
        "description": "----------------------------------------------------------------------------\nAuth 1000 ~ 1999"
      },
      "AUTH_ACCESS_TOKEN_UNAUTHORIZED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              401
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1001
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "유효하지 않은 accessToken 입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "result"
        ]
      },
      "AUTH_LEVEL_FORBIDDEN": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              403
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1003
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "API 호출 권한이 없습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "result"
        ]
      },
      "SnsLoginReqDto": {
        "type": "object",
        "properties": {
          "snsAuthProvider": {
            "type": "string",
            "enum": [
              "APPLE",
              "GOOGLE",
              "KAKAO",
              "NAVER"
            ],
            "title": "snsProvider",
            "description": "snsProvider."
          },
          "snsAuthCode": {
            "type": "string",
            "title": "authCode",
            "description": "authCode."
          }
        },
        "nullable": false,
        "required": [
          "snsAuthProvider",
          "snsAuthCode"
        ]
      },
      "SNS_AUTH_NOT_SUPPORTED_SNS_PROVIDER": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              2000
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "지원하지 않는 SNS AUTH PROVIDER 입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "result"
        ],
        "description": "----------------------------------------------------------------------------\nSnsAuth 2000 ~ 2999"
      },
      "SNS_AUTH_KAKAO_LOGIN_FAIL": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              2001
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "카카오 로그인에 실패했습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "result"
        ]
      },
      "SNS_AUTH_NAVER_LOGIN_FAIL": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              2002
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "네이버 로그인에 실패했습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "result"
        ]
      },
      "SNS_AUTH_GOOGLE_LOGIN_FAIL": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              2003
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "구글 로그인에 실패했습니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "result"
        ]
      },
      "ResponseFormAuthTokensResDto": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/AuthTokensResDto"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "AuthTokensResDto": {
        "type": "object",
        "properties": {
          "authTokens": {
            "$ref": "#/components/schemas/IAuthTokens"
          }
        },
        "nullable": false,
        "required": [
          "authTokens"
        ]
      },
      "IAuthTokens": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "accessToken",
          "refreshToken"
        ]
      },
      "RefreshTokenReqDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        },
        "nullable": false,
        "required": [
          "refreshToken"
        ]
      },
      "AUTH_REFRESH_TOKEN_UNAUTHORIZED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              401
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1002
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "유효하지 않은 refreshToken 입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "result"
        ]
      },
      "ENTITY_NOT_FOUND": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              404
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              404
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "Entity Not Found"
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "result"
        ],
        "description": "----------------------------------------------------------------------------\n- Entity Not Found Error 404"
      },
      "AUTH_UNREGISTERED_ADMIN_CREDENTIALS": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              403
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              1004
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "등록되지 않은 관리자 계정입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "result"
        ]
      },
      "ResponseFormTemporaryUserResDto": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/TemporaryUserResDto"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "TemporaryUserResDto": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "role": {
                "type": "string",
                "enum": [
                  "ADMIN",
                  "TEMPORARY_USER",
                  "USER"
                ]
              },
              "snsAuthProvider": {
                "type": "string",
                "enum": [
                  "APPLE",
                  "GOOGLE",
                  "KAKAO",
                  "NAVER"
                ]
              },
              "snsId": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "phoneNumber": {
                "type": "string",
                "nullable": true
              },
              "nickname": {
                "type": "string",
                "nullable": true
              },
              "gender": {
                "type": "string",
                "enum": [
                  "FEMALE",
                  "MALE"
                ],
                "nullable": true
              },
              "birth": {
                "type": "string",
                "nullable": true
              },
              "belt": {
                "type": "string",
                "enum": [
                  "브라운",
                  "블랙",
                  "블루",
                  "선택없음",
                  "퍼플",
                  "화이트"
                ],
                "nullable": true
              },
              "profileImageUrlKey": {
                "type": "string",
                "nullable": true
              },
              "status": {
                "type": "string",
                "enum": [
                  "ACTIVE",
                  "INACTIVE"
                ]
              },
              "createdAt": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "updatedAt": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "date-time"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "nullable": false,
            "required": [
              "id",
              "role",
              "snsAuthProvider",
              "snsId",
              "email",
              "name",
              "phoneNumber",
              "nickname",
              "gender",
              "birth",
              "belt",
              "profileImageUrlKey",
              "status",
              "createdAt",
              "updatedAt"
            ]
          }
        },
        "nullable": false,
        "required": [
          "user"
        ]
      },
      "ResponseFormIsDuplicatedNicknameResDto": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/IsDuplicatedNicknameResDto"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "IsDuplicatedNicknameResDto": {
        "type": "object",
        "properties": {
          "isDuplicated": {
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "isDuplicated"
        ]
      },
      "RegisterPhoneNumberReqDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "pattern": "^01[0-9]{9}$",
            "title": "- 사용자 전화번호. 01012345678",
            "description": "- 사용자 전화번호. 01012345678.\n- 전화번호가 저장되어 있으면 인증된 전화번호 입니다."
          }
        },
        "nullable": false,
        "required": [
          "phoneNumber"
        ]
      },
      "ResponseFormSendPhoneNumberAuthCodeResDto": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/SendPhoneNumberAuthCodeResDto"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "SendPhoneNumberAuthCodeResDto": {
        "type": "object",
        "properties": {
          "phoneNumberAuthCode": {
            "$ref": "#/components/schemas/PhoneNumberAuthCode"
          }
        },
        "nullable": false,
        "required": [
          "phoneNumberAuthCode"
        ]
      },
      "PhoneNumberAuthCode": {
        "type": "string",
        "pattern": "^[0-9]{6}$"
      },
      "confirmAuthCodeReqDto": {
        "type": "object",
        "properties": {
          "authCode": {
            "type": "string",
            "pattern": "^[0-9]{6}$"
          }
        },
        "nullable": false,
        "required": [
          "authCode"
        ]
      },
      "ResponseFormConfirmedAuthCodeResDto": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/ConfirmedAuthCodeResDto"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "ConfirmedAuthCodeResDto": {
        "type": "object",
        "properties": {
          "isConfirmed": {
            "type": "boolean"
          }
        },
        "nullable": false,
        "required": [
          "isConfirmed"
        ]
      },
      "RegisterReqDto": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/PickIUsergenderbirthnicknamebelt"
          },
          "consentPolicyTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ADVERTISEMENT",
                "PRIVACY",
                "REFUND",
                "TERMS_OF_SERVICE"
              ]
            }
          }
        },
        "nullable": false,
        "required": [
          "user",
          "consentPolicyTypes"
        ]
      },
      "PickIUsergenderbirthnicknamebelt": {
        "type": "object",
        "properties": {
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "title": "- 사용자 성별",
            "description": "- 사용자 성별."
          },
          "birth": {
            "type": "string",
            "pattern": "^[0-9]{8}$",
            "title": "- 사용자 생년월일 (BirtDate YYYYMMDD)",
            "description": "- 사용자 생년월일 (BirtDate YYYYMMDD)."
          },
          "nickname": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "description": "- 사용자 별명. (영문, 한글, 숫자만 입력 가능합니다.)"
          },
          "belt": {
            "type": "string",
            "enum": [
              "브라운",
              "블랙",
              "블루",
              "선택없음",
              "퍼플",
              "화이트"
            ],
            "title": "- 사용자 주짓수 벨트",
            "description": "- 사용자 주짓수 벨트."
          }
        },
        "nullable": false,
        "required": [
          "gender",
          "birth",
          "nickname",
          "belt"
        ],
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "REGISTER_NICKNAME_DUPLICATED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              409
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              3000
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "이미 사용중인 닉네임입니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "result"
        ],
        "description": "----------------------------------------------------------------------------\nRegister 3000 ~ 3999"
      },
      "REGISTER_POLICY_CONSENT_REQUIRED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              3002
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "필수 동의 항목을 모두 동의해야 합니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "result"
        ]
      },
      "REGISTER_PHONE_NUMBER_REQUIRED": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "status": {
            "type": "number",
            "enum": [
              400
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              3003
            ]
          },
          "result": {
            "type": "string",
            "enum": [
              "회원가입을 위해서는 휴대폰 번호인증이 필요합니다."
            ]
          },
          "detail": {}
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "status",
          "code",
          "result"
        ]
      },
      "CreateUserReqDto": {
        "type": "object",
        "properties": {
          "snsId": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "- SNS ID. 소셜 로그인을 위한 고유 식별자입니다",
            "description": "- SNS ID. 소셜 로그인을 위한 고유 식별자입니다."
          },
          "snsAuthProvider": {
            "type": "string",
            "enum": [
              "APPLE",
              "GOOGLE",
              "KAKAO",
              "NAVER"
            ],
            "title": "- SNS 공급자. 사용자가 로그인하는데 사용한 SNS 플랫폼을 나타냅니다",
            "description": "- SNS 공급자. 사용자가 로그인하는데 사용한 SNS 플랫폼을 나타냅니다."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "description": "- 사용자 이름. (컬럼길이는 256으로 설정하였으나, 입력값 유효성검사는 64자 이내로 설정하도록 합니다.)"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 320,
            "minLength": 1,
            "title": "- 사용자 이메일 주소",
            "description": "- 사용자 이메일 주소."
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^01[0-9]{9}$",
            "title": "- 사용자 전화번호. 01012345678",
            "description": "- 사용자 전화번호. 01012345678.\n- 전화번호가 저장되어 있으면 인증된 전화번호 입니다."
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "title": "- 사용자 성별",
            "description": "- 사용자 성별."
          },
          "birth": {
            "type": "string",
            "pattern": "^[0-9]{8}$",
            "title": "- 사용자 생년월일 (BirtDate YYYYMMDD)",
            "description": "- 사용자 생년월일 (BirtDate YYYYMMDD)."
          }
        },
        "nullable": false,
        "required": [
          "snsId",
          "snsAuthProvider",
          "name",
          "email"
        ]
      },
      "ResponseFormUserResDto": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/UserResDto"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "UserResDto": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/IUser"
          }
        },
        "nullable": false,
        "required": [
          "user"
        ]
      },
      "IUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "title": "- id",
            "description": "- id."
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "TEMPORARY_USER",
              "USER"
            ],
            "title": "- 사용자 역할. 사용자의 접근 권한을 나타냅니다",
            "description": "- 사용자 역할. 사용자의 접근 권한을 나타냅니다."
          },
          "snsAuthProvider": {
            "type": "string",
            "enum": [
              "APPLE",
              "GOOGLE",
              "KAKAO",
              "NAVER"
            ],
            "title": "- SNS 공급자. 사용자가 로그인하는데 사용한 SNS 플랫폼을 나타냅니다",
            "description": "- SNS 공급자. 사용자가 로그인하는데 사용한 SNS 플랫폼을 나타냅니다."
          },
          "snsId": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "- SNS ID. 소셜 로그인을 위한 고유 식별자입니다",
            "description": "- SNS ID. 소셜 로그인을 위한 고유 식별자입니다."
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 320,
            "minLength": 1,
            "title": "- 사용자 이메일 주소",
            "description": "- 사용자 이메일 주소."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "description": "- 사용자 이름. (컬럼길이는 256으로 설정하였으나, 입력값 유효성검사는 64자 이내로 설정하도록 합니다.)"
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^01[0-9]{9}$",
            "title": "- 사용자 전화번호. 01012345678",
            "description": "- 사용자 전화번호. 01012345678.\n- 전화번호가 저장되어 있으면 인증된 전화번호 입니다."
          },
          "nickname": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "description": "- 사용자 별명. (영문, 한글, 숫자만 입력 가능합니다.)"
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "title": "- 사용자 성별",
            "description": "- 사용자 성별."
          },
          "birth": {
            "type": "string",
            "pattern": "^[0-9]{8}$",
            "title": "- 사용자 생년월일 (BirtDate YYYYMMDD)",
            "description": "- 사용자 생년월일 (BirtDate YYYYMMDD)."
          },
          "belt": {
            "type": "string",
            "enum": [
              "브라운",
              "블랙",
              "블루",
              "선택없음",
              "퍼플",
              "화이트"
            ],
            "title": "- 사용자 주짓수 벨트",
            "description": "- 사용자 주짓수 벨트."
          },
          "profileImageUrlKey": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "- 사용자 프로필 이미지 키 (이미지 파일 이름). (썸네일 이미지 역할)",
            "description": "- 사용자 프로필 이미지 키 (이미지 파일 이름). (썸네일 이미지 역할).\n- 참고 s3 image key 최대길이 1024(https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html)."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "title": "- 사용자 상태. 활성, 비활성 등을 나타냅니다",
            "description": "- 사용자 상태. 활성, 비활성 등을 나타냅니다."
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- 생성 시간. 데이터베이스에 엔티티가 처음 저장될 때 자동으로 설정됩니다",
            "description": "- 생성 시간. 데이터베이스에 엔티티가 처음 저장될 때 자동으로 설정됩니다."
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- 최종 업데이트 시간. 엔티티가 수정될 때마다 자동으로 업데이트됩니다",
            "description": "- 최종 업데이트 시간. 엔티티가 수정될 때마다 자동으로 업데이트됩니다."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "role",
          "snsAuthProvider",
          "snsId",
          "email",
          "name",
          "phoneNumber",
          "nickname",
          "gender",
          "birth",
          "belt",
          "profileImageUrlKey",
          "status",
          "createdAt",
          "updatedAt"
        ],
        "description": "- 각 snsAuthProvider 마다 제공되는 정보.\n- kakao  : snsId, email, name, phoneNumber, gender, birthday, birthyear.\n- naver  : snsId, email, name, phoneNumber, gender, birthday, birthyear.\n- google : snsId, email, name.\n- apple  : snsId, email, name."
      },
      "PartialPickIUsernamegenderbirthnicknamebelt": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "description": "- 사용자 이름. (컬럼길이는 256으로 설정하였으나, 입력값 유효성검사는 64자 이내로 설정하도록 합니다.)"
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "title": "- 사용자 성별",
            "description": "- 사용자 성별."
          },
          "birth": {
            "type": "string",
            "pattern": "^[0-9]{8}$",
            "title": "- 사용자 생년월일 (BirtDate YYYYMMDD)",
            "description": "- 사용자 생년월일 (BirtDate YYYYMMDD)."
          },
          "nickname": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9ㄱ-ㅎ가-힣]{1,64}$",
            "description": "- 사용자 별명. (영문, 한글, 숫자만 입력 가능합니다.)"
          },
          "belt": {
            "type": "string",
            "enum": [
              "브라운",
              "블랙",
              "블루",
              "선택없음",
              "퍼플",
              "화이트"
            ],
            "title": "- 사용자 주짓수 벨트",
            "description": "- 사용자 주짓수 벨트."
          }
        },
        "nullable": false,
        "description": "Make all properties in T optional"
      },
      "ResponseFormFindPoliciesResDto": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/FindPoliciesResDto"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "FindPoliciesResDto": {
        "type": "object",
        "properties": {
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPolicy"
            }
          }
        },
        "nullable": false,
        "required": [
          "policies"
        ]
      },
      "IPolicy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "title": "- id",
            "description": "- id."
          },
          "version": {
            "type": "number",
            "title": "- 약관의 버전",
            "description": "- 약관의 버전.\n- 버전이 변경될 때마다 새로운 약관으로 간주합니다."
          },
          "type": {
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "PRIVACY",
              "REFUND",
              "TERMS_OF_SERVICE"
            ],
            "title": "- 약관의 종류",
            "description": "- 약관의 종류.\n- TERMS_OF_SERVICE: 서비스 이용 약관.\n- PRIVACY: 개인정보 처리 방침.\n- REFUND: 환불 정책.\n- ADVERTISEMENT: 광고정책."
          },
          "isMandatory": {
            "type": "boolean",
            "description": "- 약관동의 필수여수\n- true: 필수\n- false: 선택"
          },
          "title": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "- 약관의 제목. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책",
            "description": "- 약관의 제목. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "// TODO: html 혹은 markdown 형식으로 저장할지 고민중\n- 약관의 내용. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "description": "- 약관 생성 날짜"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "version",
          "type",
          "isMandatory",
          "title",
          "content",
          "createdAt"
        ],
        "description": "- 약관 테이블.\n- 같은 타입의 약관수정이 필요할때는 업데이트가 아닌 새로운 약관을 생성합니다.\n- 새로운 약관이 생성될 때마다 버전을 올립니다."
      },
      "ResponseFormFindPolicyResDto": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/FindPolicyResDto"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "FindPolicyResDto": {
        "type": "object",
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/IPolicy.Nullable"
          }
        },
        "nullable": false,
        "required": [
          "policy"
        ]
      },
      "IPolicy.Nullable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "title": "- id",
            "description": "- id."
          },
          "version": {
            "type": "number",
            "title": "- 약관의 버전",
            "description": "- 약관의 버전.\n- 버전이 변경될 때마다 새로운 약관으로 간주합니다."
          },
          "type": {
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "PRIVACY",
              "REFUND",
              "TERMS_OF_SERVICE"
            ],
            "title": "- 약관의 종류",
            "description": "- 약관의 종류.\n- TERMS_OF_SERVICE: 서비스 이용 약관.\n- PRIVACY: 개인정보 처리 방침.\n- REFUND: 환불 정책.\n- ADVERTISEMENT: 광고정책."
          },
          "isMandatory": {
            "type": "boolean",
            "description": "- 약관동의 필수여수\n- true: 필수\n- false: 선택"
          },
          "title": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "- 약관의 제목. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책",
            "description": "- 약관의 제목. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "// TODO: html 혹은 markdown 형식으로 저장할지 고민중\n- 약관의 내용. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "description": "- 약관 생성 날짜"
          }
        },
        "nullable": true,
        "required": [
          "id",
          "version",
          "type",
          "isMandatory",
          "title",
          "content",
          "createdAt"
        ],
        "description": "- 약관 테이블.\n- 같은 타입의 약관수정이 필요할때는 업데이트가 아닌 새로운 약관을 생성합니다.\n- 새로운 약관이 생성될 때마다 버전을 올립니다."
      },
      "CreatePolicyReqDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "PRIVACY",
              "REFUND",
              "TERMS_OF_SERVICE"
            ],
            "title": "- 약관의 종류",
            "description": "- 약관의 종류.\n- TERMS_OF_SERVICE: 서비스 이용 약관.\n- PRIVACY: 개인정보 처리 방침.\n- REFUND: 환불 정책.\n- ADVERTISEMENT: 광고정책."
          },
          "isMandatory": {
            "type": "boolean",
            "description": "- 약관동의 필수여수\n- true: 필수\n- false: 선택"
          },
          "title": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "- 약관의 제목. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책",
            "description": "- 약관의 제목. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "description": "// TODO: html 혹은 markdown 형식으로 저장할지 고민중\n- 약관의 내용. ex) 서비스 이용 약관, 개인정보 처리 방침, 환불 정책."
          }
        },
        "nullable": false,
        "required": [
          "type",
          "isMandatory",
          "title",
          "content"
        ]
      },
      "ResponseFormPolicyResDto": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/PolicyResDto"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "PolicyResDto": {
        "type": "object",
        "properties": {
          "policy": {
            "$ref": "#/components/schemas/IPolicy"
          }
        },
        "nullable": false,
        "required": [
          "policy"
        ]
      },
      "FindPoliciesReqDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ADVERTISEMENT",
              "PRIVACY",
              "REFUND",
              "TERMS_OF_SERVICE"
            ]
          }
        },
        "nullable": false
      },
      "FindCompetitionsReqQuery": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "dateFilter": {
            "type": "string",
            "pattern": "^[0-9]{4}-[0-9]{2}$"
          },
          "locationFilter": {
            "type": "string",
            "enum": [
              "강원",
              "경기",
              "경남",
              "경북",
              "광주",
              "대구",
              "대전",
              "부산",
              "서울",
              "세종",
              "울산",
              "인천",
              "전남",
              "전북",
              "제주",
              "충남",
              "충북"
            ]
          },
          "selectFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "간편결제",
                "단독출전조정",
                "신청가능",
                "얼리버드"
              ]
            }
          },
          "sortOption": {
            "type": "string",
            "enum": [
              "마감임박순",
              "일자순",
              "조회순"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          }
        },
        "nullable": false,
        "required": [
          "page"
        ]
      },
      "ResponseFormFindCompetitionsRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/FindCompetitionsRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "FindCompetitionsRes": {
        "type": "object",
        "properties": {
          "competitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OmitICompetitiondivisionscombinationDiscountSnapshots"
            }
          },
          "nextPage": {
            "type": "number",
            "nullable": true
          }
        },
        "nullable": false,
        "required": [
          "competitions",
          "nextPage"
        ]
      },
      "OmitICompetitiondivisionscombinationDiscountSnapshots": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "- ULID",
            "description": "- ULID."
          },
          "title": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "- 대회의 이름",
            "description": "- 대회의 이름."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "description": "- 대회의 상태\n- ACTIVE: 활성화된 대회 유저에게 노출, 참가 신청 가능\n- INACTIVE: 비활성화된 대회 유저에게 노출되지 않음, 참가 신청 불가능"
          },
          "viewCount": {
            "type": "integer",
            "title": "- 조회수",
            "description": "- 조회수."
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- 엔티티가 데이터베이스에 처음 저장될 때의 생성 시간",
            "description": "- 엔티티가 데이터베이스에 처음 저장될 때의 생성 시간."
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- 엔티티가 수정될 때마다 업데이트되는 최종 업데이트 시간",
            "description": "- 엔티티가 수정될 때마다 업데이트되는 최종 업데이트 시간."
          },
          "earlybirdDiscountSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IEarlybirdDiscountSnapshot"
            }
          },
          "address": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "- 대회가 열리는 장소",
            "description": "- 대회가 열리는 장소."
          },
          "competitionDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 대회 날짜",
            "description": "- 대회 날짜."
          },
          "registrationStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "description": "- 참가 신청 시작일"
          },
          "registrationEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 참가 신청 마감일",
            "description": "- 참가 신청 마감일."
          },
          "refundDeadlineDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 환불 가능 기간 마감일",
            "description": "- 환불 가능 기간 마감일."
          },
          "soloRegistrationAdjustmentStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 단독 참가자의 부문 조정 시작일",
            "description": "- 단독 참가자의 부문 조정 시작일.\n- 부문에 참가자가 한 명만 있는 경우, 해당 참가자를 다른 체급이나 부문으로 조정할 수 있는 기간의 시작을 나타냅니다."
          },
          "soloRegistrationAdjustmentEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 단독 참가자의 부문 조정 마감일",
            "description": "- 단독 참가자의 부문 조정 마감일."
          },
          "registrationListOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 참가자 명단 공개일",
            "description": "- 참가자 명단 공개일."
          },
          "bracketOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 대진표 공개일",
            "description": "- 대진표 공개일."
          },
          "description": {
            "type": "string",
            "maxLength": 10000,
            "minLength": 1,
            "title": "- 대회 상세 정보",
            "description": "- 대회 상세 정보.\n- 마크다운 형식으로 작성됩니다."
          },
          "isPartnership": {
            "type": "boolean",
            "title": "- 협약 대회 여부",
            "description": "- 협약 대회 여부."
          },
          "posterImgUrlKey": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": true,
            "title": "- 대회 포스터 이미지 URL Key",
            "description": "- 대회 포스터 이미지 URL Key."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "title",
          "status",
          "viewCount",
          "createdAt",
          "updatedAt",
          "earlybirdDiscountSnapshots",
          "address",
          "competitionDate",
          "registrationStartDate",
          "registrationEndDate",
          "refundDeadlineDate",
          "soloRegistrationAdjustmentStartDate",
          "soloRegistrationAdjustmentEndDate",
          "registrationListOpenDate",
          "bracketOpenDate",
          "description",
          "isPartnership",
          "posterImgUrlKey"
        ],
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "IEarlybirdDiscountSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "- ULID",
            "description": "- ULID."
          },
          "earlybirdStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "description": "- 얼리버드 시작일"
          },
          "earlybirdEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "description": "- 얼리버드 마감일"
          },
          "discountAmount": {
            "type": "number",
            "minimum": 0,
            "description": "- 얼리버드 할인 가격 ex) 10000\n- 단위 : 원\n- 음수 값은 허용하지 않습니다."
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- 생성 시간. 데이터베이스에 엔티티가 처음 저장될 때 자동으로 설정됩니다",
            "description": "- 생성 시간. 데이터베이스에 엔티티가 처음 저장될 때 자동으로 설정됩니다."
          },
          "competitionId": {
            "type": "string",
            "title": "- competition id",
            "description": "- competition id."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "earlybirdStartDate",
          "earlybirdEndDate",
          "discountAmount",
          "createdAt",
          "competitionId"
        ]
      },
      "ResponseFormGetCompetitionRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/GetCompetitionRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "GetCompetitionRes": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/ICompetition"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "ICompetition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "- ULID",
            "description": "- ULID."
          },
          "title": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "- 대회의 이름",
            "description": "- 대회의 이름."
          },
          "address": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "- 대회가 열리는 장소",
            "description": "- 대회가 열리는 장소."
          },
          "competitionDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 대회 날짜",
            "description": "- 대회 날짜."
          },
          "registrationStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "description": "- 참가 신청 시작일"
          },
          "registrationEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 참가 신청 마감일",
            "description": "- 참가 신청 마감일."
          },
          "refundDeadlineDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 환불 가능 기간 마감일",
            "description": "- 환불 가능 기간 마감일."
          },
          "soloRegistrationAdjustmentStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 단독 참가자의 부문 조정 시작일",
            "description": "- 단독 참가자의 부문 조정 시작일.\n- 부문에 참가자가 한 명만 있는 경우, 해당 참가자를 다른 체급이나 부문으로 조정할 수 있는 기간의 시작을 나타냅니다."
          },
          "soloRegistrationAdjustmentEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 단독 참가자의 부문 조정 마감일",
            "description": "- 단독 참가자의 부문 조정 마감일."
          },
          "registrationListOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 참가자 명단 공개일",
            "description": "- 참가자 명단 공개일."
          },
          "bracketOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 대진표 공개일",
            "description": "- 대진표 공개일."
          },
          "description": {
            "type": "string",
            "maxLength": 10000,
            "minLength": 1,
            "title": "- 대회 상세 정보",
            "description": "- 대회 상세 정보.\n- 마크다운 형식으로 작성됩니다."
          },
          "isPartnership": {
            "type": "boolean",
            "title": "- 협약 대회 여부",
            "description": "- 협약 대회 여부."
          },
          "viewCount": {
            "type": "integer",
            "title": "- 조회수",
            "description": "- 조회수."
          },
          "posterImgUrlKey": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": true,
            "title": "- 대회 포스터 이미지 URL Key",
            "description": "- 대회 포스터 이미지 URL Key."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "description": "- 대회의 상태\n- ACTIVE: 활성화된 대회 유저에게 노출, 참가 신청 가능\n- INACTIVE: 비활성화된 대회 유저에게 노출되지 않음, 참가 신청 불가능"
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- 엔티티가 데이터베이스에 처음 저장될 때의 생성 시간",
            "description": "- 엔티티가 데이터베이스에 처음 저장될 때의 생성 시간."
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- 엔티티가 수정될 때마다 업데이트되는 최종 업데이트 시간",
            "description": "- 엔티티가 수정될 때마다 업데이트되는 최종 업데이트 시간."
          },
          "divisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDivision"
            }
          },
          "earlybirdDiscountSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IEarlybirdDiscountSnapshot"
            }
          },
          "combinationDiscountSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICombinationDiscountSnapshot"
            }
          }
        },
        "nullable": false,
        "required": [
          "id",
          "title",
          "address",
          "competitionDate",
          "registrationStartDate",
          "registrationEndDate",
          "refundDeadlineDate",
          "soloRegistrationAdjustmentStartDate",
          "soloRegistrationAdjustmentEndDate",
          "registrationListOpenDate",
          "bracketOpenDate",
          "description",
          "isPartnership",
          "viewCount",
          "posterImgUrlKey",
          "status",
          "createdAt",
          "updatedAt",
          "divisions",
          "earlybirdDiscountSnapshots",
          "combinationDiscountSnapshots"
        ]
      },
      "IDivision": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "- ULID",
            "description": "- ULID."
          },
          "category": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "- 부문 카테고리",
            "description": "- 부문 카테고리."
          },
          "uniform": {
            "type": "string",
            "enum": [
              "GI",
              "NOGI"
            ],
            "description": "- 유니폼 GI, NOGI"
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE",
              "MIXED"
            ],
            "title": "- 성별",
            "description": "- 성별."
          },
          "belt": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "- 주짓수벨트",
            "description": "- 주짓수벨트."
          },
          "weight": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "- 체급",
            "description": "- 체급."
          },
          "birthYearRangeStart": {
            "type": "string",
            "minLength": 4,
            "pattern": "^[0-9]{4}$",
            "title": "- 출생년도 범위 시작. YYYY",
            "description": "- 출생년도 범위 시작. YYYY."
          },
          "birthYearRangeEnd": {
            "type": "string",
            "minLength": 4,
            "pattern": "^[0-9]{4}$",
            "title": "- 출생년도 범위 끝. YYYY",
            "description": "- 출생년도 범위 끝. YYYY."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "title": "- 활성 상태",
            "description": "- 활성 상태.\n- ACTIVE: 해당 부문에 신청 가능. (USER 에게 노출됨.)\n- INACTIVE: 해당 부문에 신청 불가능. (USER 에게 노출되지 않음.)"
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- created at",
            "description": "- created at."
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- updated at",
            "description": "- updated at."
          },
          "competitionId": {
            "type": "string",
            "title": "- competitionId",
            "description": "- competitionId."
          },
          "priceSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPriceSnapshot"
            }
          }
        },
        "nullable": false,
        "required": [
          "id",
          "category",
          "uniform",
          "gender",
          "belt",
          "weight",
          "birthYearRangeStart",
          "birthYearRangeEnd",
          "status",
          "createdAt",
          "updatedAt",
          "competitionId",
          "priceSnapshots"
        ]
      },
      "IPriceSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "- ULID",
            "description": "- ULID."
          },
          "price": {
            "type": "integer",
            "minimum": 0,
            "title": "- price, 단위: 원",
            "description": "- price, 단위: 원."
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- 엔티티가 데이터베이스에 처음 저장될 때의 생성 시간. 자동으로 설정됩니다",
            "description": "- 엔티티가 데이터베이스에 처음 저장될 때의 생성 시간. 자동으로 설정됩니다."
          },
          "divisionId": {
            "type": "string",
            "title": "- division id",
            "description": "- division id."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "price",
          "createdAt",
          "divisionId"
        ]
      },
      "ICombinationDiscountSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "- ULID",
            "description": "- ULID."
          },
          "combinationDiscountRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICombinationDiscountRule"
            }
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- 생성 시간. 데이터베이스에 엔티티가 처음 저장될 때 자동으로 설정됩니다",
            "description": "- 생성 시간. 데이터베이스에 엔티티가 처음 저장될 때 자동으로 설정됩니다."
          },
          "competitionId": {
            "type": "string",
            "title": "- competition id",
            "description": "- competition id."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "combinationDiscountRules",
          "createdAt",
          "competitionId"
        ]
      },
      "ICombinationDiscountRule": {
        "type": "object",
        "properties": {
          "combination": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICombinationUnit"
            }
          },
          "discountAmount": {
            "type": "number"
          }
        },
        "nullable": false,
        "required": [
          "combination",
          "discountAmount"
        ]
      },
      "ICombinationUnit": {
        "type": "object",
        "properties": {
          "uniformType": {
            "type": "string",
            "enum": [
              "GI",
              "NOGI"
            ]
          },
          "weightType": {
            "type": "string",
            "enum": [
              "ABSOLUTE",
              "WEIGHT"
            ]
          }
        },
        "nullable": false,
        "required": [
          "uniformType",
          "weightType"
        ]
      },
      "ICompetition.CreateDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "- 대회의 이름",
            "description": "- 대회의 이름."
          },
          "address": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "- 대회가 열리는 장소",
            "description": "- 대회가 열리는 장소."
          },
          "competitionDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 대회 날짜",
            "description": "- 대회 날짜."
          },
          "registrationStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "description": "- 참가 신청 시작일"
          },
          "registrationEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 참가 신청 마감일",
            "description": "- 참가 신청 마감일."
          },
          "refundDeadlineDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 환불 가능 기간 마감일",
            "description": "- 환불 가능 기간 마감일."
          },
          "soloRegistrationAdjustmentStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 단독 참가자의 부문 조정 시작일",
            "description": "- 단독 참가자의 부문 조정 시작일.\n- 부문에 참가자가 한 명만 있는 경우, 해당 참가자를 다른 체급이나 부문으로 조정할 수 있는 기간의 시작을 나타냅니다."
          },
          "soloRegistrationAdjustmentEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 단독 참가자의 부문 조정 마감일",
            "description": "- 단독 참가자의 부문 조정 마감일."
          },
          "registrationListOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 참가자 명단 공개일",
            "description": "- 참가자 명단 공개일."
          },
          "bracketOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 대진표 공개일",
            "description": "- 대진표 공개일."
          },
          "description": {
            "type": "string",
            "maxLength": 10000,
            "minLength": 1,
            "title": "- 대회 상세 정보",
            "description": "- 대회 상세 정보.\n- 마크다운 형식으로 작성됩니다."
          },
          "isPartnership": {
            "type": "boolean",
            "title": "- 협약 대회 여부",
            "description": "- 협약 대회 여부."
          },
          "posterImgUrlKey": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": true,
            "title": "- 대회 포스터 이미지 URL Key",
            "description": "- 대회 포스터 이미지 URL Key."
          }
        },
        "nullable": false
      },
      "ResponseFormCreateCompetitionRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateCompetitionRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "CreateCompetitionRes": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/OmitICompetitiondivisionsearlybirdDiscountSnapshotscombinationDiscountSnapshots"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "OmitICompetitiondivisionsearlybirdDiscountSnapshotscombinationDiscountSnapshots": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "- ULID",
            "description": "- ULID."
          },
          "title": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "- 대회의 이름",
            "description": "- 대회의 이름."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "description": "- 대회의 상태\n- ACTIVE: 활성화된 대회 유저에게 노출, 참가 신청 가능\n- INACTIVE: 비활성화된 대회 유저에게 노출되지 않음, 참가 신청 불가능"
          },
          "viewCount": {
            "type": "integer",
            "title": "- 조회수",
            "description": "- 조회수."
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- 엔티티가 데이터베이스에 처음 저장될 때의 생성 시간",
            "description": "- 엔티티가 데이터베이스에 처음 저장될 때의 생성 시간."
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- 엔티티가 수정될 때마다 업데이트되는 최종 업데이트 시간",
            "description": "- 엔티티가 수정될 때마다 업데이트되는 최종 업데이트 시간."
          },
          "address": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "- 대회가 열리는 장소",
            "description": "- 대회가 열리는 장소."
          },
          "competitionDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 대회 날짜",
            "description": "- 대회 날짜."
          },
          "registrationStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "description": "- 참가 신청 시작일"
          },
          "registrationEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 참가 신청 마감일",
            "description": "- 참가 신청 마감일."
          },
          "refundDeadlineDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 환불 가능 기간 마감일",
            "description": "- 환불 가능 기간 마감일."
          },
          "soloRegistrationAdjustmentStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 단독 참가자의 부문 조정 시작일",
            "description": "- 단독 참가자의 부문 조정 시작일.\n- 부문에 참가자가 한 명만 있는 경우, 해당 참가자를 다른 체급이나 부문으로 조정할 수 있는 기간의 시작을 나타냅니다."
          },
          "soloRegistrationAdjustmentEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 단독 참가자의 부문 조정 마감일",
            "description": "- 단독 참가자의 부문 조정 마감일."
          },
          "registrationListOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 참가자 명단 공개일",
            "description": "- 참가자 명단 공개일."
          },
          "bracketOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 대진표 공개일",
            "description": "- 대진표 공개일."
          },
          "description": {
            "type": "string",
            "maxLength": 10000,
            "minLength": 1,
            "title": "- 대회 상세 정보",
            "description": "- 대회 상세 정보.\n- 마크다운 형식으로 작성됩니다."
          },
          "isPartnership": {
            "type": "boolean",
            "title": "- 협약 대회 여부",
            "description": "- 협약 대회 여부."
          },
          "posterImgUrlKey": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": true,
            "title": "- 대회 포스터 이미지 URL Key",
            "description": "- 대회 포스터 이미지 URL Key."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "title",
          "status",
          "viewCount",
          "createdAt",
          "updatedAt",
          "address",
          "competitionDate",
          "registrationStartDate",
          "registrationEndDate",
          "refundDeadlineDate",
          "soloRegistrationAdjustmentStartDate",
          "soloRegistrationAdjustmentEndDate",
          "registrationListOpenDate",
          "bracketOpenDate",
          "description",
          "isPartnership",
          "posterImgUrlKey"
        ],
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "ResponseFormGetCompetitionRet": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/GetCompetitionRet"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "GetCompetitionRet": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/ICompetition"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "UpdateCompetitionReqBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "- 대회의 이름",
            "description": "- 대회의 이름."
          },
          "address": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "- 대회가 열리는 장소",
            "description": "- 대회가 열리는 장소."
          },
          "competitionDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 대회 날짜",
            "description": "- 대회 날짜."
          },
          "registrationStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "description": "- 참가 신청 시작일"
          },
          "registrationEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 참가 신청 마감일",
            "description": "- 참가 신청 마감일."
          },
          "refundDeadlineDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 환불 가능 기간 마감일",
            "description": "- 환불 가능 기간 마감일."
          },
          "soloRegistrationAdjustmentStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 단독 참가자의 부문 조정 시작일",
            "description": "- 단독 참가자의 부문 조정 시작일.\n- 부문에 참가자가 한 명만 있는 경우, 해당 참가자를 다른 체급이나 부문으로 조정할 수 있는 기간의 시작을 나타냅니다."
          },
          "soloRegistrationAdjustmentEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 단독 참가자의 부문 조정 마감일",
            "description": "- 단독 참가자의 부문 조정 마감일."
          },
          "registrationListOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 참가자 명단 공개일",
            "description": "- 참가자 명단 공개일."
          },
          "bracketOpenDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              {
                "type": "string",
                "nullable": true
              }
            ],
            "title": "- 대진표 공개일",
            "description": "- 대진표 공개일."
          },
          "description": {
            "type": "string",
            "maxLength": 10000,
            "minLength": 1,
            "title": "- 대회 상세 정보",
            "description": "- 대회 상세 정보.\n- 마크다운 형식으로 작성됩니다."
          },
          "isPartnership": {
            "type": "boolean",
            "title": "- 협약 대회 여부",
            "description": "- 협약 대회 여부."
          },
          "posterImgUrlKey": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": true,
            "title": "- 대회 포스터 이미지 URL Key",
            "description": "- 대회 포스터 이미지 URL Key."
          }
        },
        "nullable": false
      },
      "ResponseFormUpdateCompetitionRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/UpdateCompetitionRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "UpdateCompetitionRes": {
        "type": "object",
        "properties": {
          "competition": {
            "$ref": "#/components/schemas/OmitICompetitiondivisionsearlybirdDiscountSnapshotscombinationDiscountSnapshots"
          }
        },
        "nullable": false,
        "required": [
          "competition"
        ]
      },
      "UpdateCompetitionStatusReqBody": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          }
        },
        "nullable": false,
        "required": [
          "status"
        ]
      },
      "CreateDivisionsReqBody": {
        "type": "object",
        "properties": {
          "divisionPacks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDivisionPack"
            },
            "minItems": 1,
            "title": "- Division packs",
            "description": "- Division packs."
          }
        },
        "nullable": false,
        "required": [
          "divisionPacks"
        ]
      },
      "IDivisionPack": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uniforms": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "GI",
                "NOGI"
              ]
            }
          },
          "genders": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "FEMALE",
                "MALE",
                "MIXED"
              ]
            }
          },
          "belts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "weights": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "birthYearRangeStart": {
            "type": "string"
          },
          "birthYearRangeEnd": {
            "type": "string"
          },
          "price": {
            "type": "number"
          }
        },
        "nullable": false,
        "required": [
          "categories",
          "uniforms",
          "genders",
          "belts",
          "weights",
          "birthYearRangeStart",
          "birthYearRangeEnd",
          "price"
        ]
      },
      "ResponseFormCreateDivisionsRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateDivisionsRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "CreateDivisionsRes": {
        "type": "object",
        "properties": {
          "divisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IDivision"
            }
          }
        },
        "nullable": false,
        "required": [
          "divisions"
        ]
      },
      "PickIEarlybirdDiscountSnapshotearlybirdStartDateearlybirdEndDatediscountAmount": {
        "type": "object",
        "properties": {
          "earlybirdStartDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "description": "- 얼리버드 시작일"
          },
          "earlybirdEndDate": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "description": "- 얼리버드 마감일"
          },
          "discountAmount": {
            "type": "number",
            "minimum": 0,
            "description": "- 얼리버드 할인 가격 ex) 10000\n- 단위 : 원\n- 음수 값은 허용하지 않습니다."
          }
        },
        "nullable": false,
        "required": [
          "earlybirdStartDate",
          "earlybirdEndDate",
          "discountAmount"
        ],
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "ResponseFormCreateEarlybirdDiscountSnapshotRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateEarlybirdDiscountSnapshotRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "CreateEarlybirdDiscountSnapshotRes": {
        "type": "object",
        "properties": {
          "earlybirdDiscountSnapshot": {
            "$ref": "#/components/schemas/IEarlybirdDiscountSnapshot"
          }
        },
        "nullable": false,
        "required": [
          "earlybirdDiscountSnapshot"
        ]
      },
      "PickICombinationDiscountSnapshotcombinationDiscountRules": {
        "type": "object",
        "properties": {
          "combinationDiscountRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ICombinationDiscountRule"
            }
          }
        },
        "nullable": false,
        "required": [
          "combinationDiscountRules"
        ],
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "ResponseFormCreateCombinationDiscountSnapshotRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateCombinationDiscountSnapshotRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "CreateCombinationDiscountSnapshotRes": {
        "type": "object",
        "properties": {
          "combinationDiscountSnapshot": {
            "$ref": "#/components/schemas/ICombinationDiscountSnapshot"
          }
        },
        "nullable": false,
        "required": [
          "combinationDiscountSnapshot"
        ]
      },
      "CreateApplicationReqBody": {
        "type": "object",
        "properties": {
          "competitionId": {
            "type": "string"
          },
          "participationDivisionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "title": "- Division IDs to participate",
            "description": "- Division IDs to participate."
          },
          "playerSnapshotCreateDto": {
            "$ref": "#/components/schemas/IPlayerSnapshot.CreateDto"
          },
          "applicationType": {
            "type": "string",
            "enum": [
              "PROXY",
              "SELF"
            ]
          }
        },
        "nullable": false,
        "required": [
          "competitionId",
          "participationDivisionIds",
          "playerSnapshotCreateDto",
          "applicationType"
        ]
      },
      "IPlayerSnapshot.CreateDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "pattern": "^01[0-9]{9}$",
            "title": "- player phone number",
            "description": "- player phone number.\n- ex) 01012345678."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "- player name",
            "description": "- player name."
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "description": "- player gender"
          },
          "birth": {
            "type": "string",
            "pattern": "^[0-9]{8}$",
            "title": "- player birth (BirtDate YYYYMMDD)",
            "description": "- player birth (BirtDate YYYYMMDD)."
          },
          "belt": {
            "type": "string",
            "enum": [
              "브라운",
              "블랙",
              "블루",
              "퍼플",
              "화이트"
            ],
            "description": "- player belt"
          },
          "network": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "- 주짓수 네트워크",
            "description": "- 주짓수 네트워크."
          },
          "team": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "- 소속 팀",
            "description": "- 소속 팀."
          },
          "masterName": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "- 관장님 성함",
            "description": "- 관장님 성함."
          }
        },
        "nullable": false,
        "required": [
          "phoneNumber",
          "name",
          "gender",
          "birth",
          "belt",
          "network",
          "team",
          "masterName"
        ]
      },
      "ResponseFormCreateApplicationRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/CreateApplicationRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "CreateApplicationRes": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/IApplication.ModelValue.Ready"
          }
        },
        "nullable": false,
        "required": [
          "application"
        ]
      },
      "IApplication.ModelValue.Ready": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "- ULID",
            "description": "- ULID."
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- created at",
            "description": "- created at."
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- updated at",
            "description": "- updated at."
          },
          "type": {
            "type": "string",
            "enum": [
              "PROXY",
              "SELF"
            ],
            "title": "- 본인신청과 대리신청을 구별하는 type",
            "description": "- 본인신청과 대리신청을 구별하는 type.\n- SELF: 본인 신청\n- PROXY: 대리 신청"
          },
          "status": {
            "type": "string",
            "enum": [
              "CANCELED",
              "DELETED",
              "DONE",
              "READY"
            ],
            "title": "- status",
            "description": "- status.\n- READY: 결제 대기중\n- DONE: 결제 완료\n- CANCELED: 결제 취소\n- DELETED: 삭제됨 (DB에는 남아있으나 유저에게 보여지지 않음)"
          },
          "competitionId": {
            "type": "string",
            "title": "- competition id",
            "description": "- competition id."
          },
          "userId": {
            "type": "number",
            "title": "- user id",
            "description": "- user id."
          },
          "playerSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPlayerSnapshot"
            },
            "minItems": 1,
            "title": "- player snapshots",
            "description": "- player snapshots."
          },
          "participationDivisionInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IParticipationDivisionInfo"
            },
            "minItems": 1,
            "title": "- participation division infos",
            "description": "- participation division infos."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "type",
          "status",
          "competitionId",
          "userId",
          "playerSnapshots",
          "participationDivisionInfos"
        ]
      },
      "IPlayerSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "- ULID",
            "description": "- ULID."
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "- player name",
            "description": "- player name."
          },
          "gender": {
            "type": "string",
            "enum": [
              "FEMALE",
              "MALE"
            ],
            "description": "- player gender"
          },
          "birth": {
            "type": "string",
            "pattern": "^[0-9]{8}$",
            "title": "- player birth (BirtDate YYYYMMDD)",
            "description": "- player birth (BirtDate YYYYMMDD)."
          },
          "phoneNumber": {
            "type": "string",
            "pattern": "^01[0-9]{9}$",
            "title": "- player phone number",
            "description": "- player phone number.\n- ex) 01012345678."
          },
          "belt": {
            "type": "string",
            "enum": [
              "브라운",
              "블랙",
              "블루",
              "퍼플",
              "화이트"
            ],
            "description": "- player belt"
          },
          "network": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "- 주짓수 네트워크",
            "description": "- 주짓수 네트워크."
          },
          "team": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "- 소속 팀",
            "description": "- 소속 팀."
          },
          "masterName": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "- 관장님 성함",
            "description": "- 관장님 성함."
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- 엔티티가 데이터베이스에 처음 저장될 때의 생성 시간. 자동으로 설정됩니다",
            "description": "- 엔티티가 데이터베이스에 처음 저장될 때의 생성 시간. 자동으로 설정됩니다."
          },
          "applicationId": {
            "type": "string",
            "title": "- application id",
            "description": "- application id."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "name",
          "gender",
          "birth",
          "phoneNumber",
          "belt",
          "network",
          "team",
          "masterName",
          "createdAt",
          "applicationId"
        ]
      },
      "IParticipationDivisionInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "- ULID",
            "description": "- ULID."
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- created at",
            "description": "- created at."
          },
          "applicationId": {
            "type": "string",
            "title": "- application id",
            "description": "- application id."
          },
          "participationDivisionInfoSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IParticipationDivisionInfoSnapshot"
            },
            "title": "- 참가 부문 ID",
            "description": "- 참가 부문 ID."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "createdAt",
          "applicationId",
          "participationDivisionInfoSnapshots"
        ]
      },
      "IParticipationDivisionInfoSnapshot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "- ULID",
            "description": "- ULID."
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- 엔티티가 데이터베이스에 처음 저장될 때의 생성 시간. 자동으로 설정됩니다",
            "description": "- 엔티티가 데이터베이스에 처음 저장될 때의 생성 시간. 자동으로 설정됩니다."
          },
          "participationDivisionInfoId": {
            "type": "string",
            "title": "- participation division Info id",
            "description": "- participation division Info id."
          },
          "participationDivisionId": {
            "type": "string",
            "description": "- division id"
          },
          "division": {
            "$ref": "#/components/schemas/IDivision"
          }
        },
        "nullable": false,
        "required": [
          "id",
          "createdAt",
          "participationDivisionInfoId",
          "participationDivisionId",
          "division"
        ]
      },
      "ResponseFormGetApplicationRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/GetApplicationRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "GetApplicationRes": {
        "type": "object",
        "properties": {
          "application": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/IApplication.ModelValue.Done"
              },
              {
                "$ref": "#/components/schemas/IApplication.ModelValue.Ready"
              }
            ]
          }
        },
        "nullable": false,
        "required": [
          "application"
        ]
      },
      "IApplication.ModelValue.Done": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 26,
            "minLength": 26,
            "title": "- ULID",
            "description": "- ULID."
          },
          "createdAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- created at",
            "description": "- created at."
          },
          "updatedAt": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "title": "- updated at",
            "description": "- updated at."
          },
          "type": {
            "type": "string",
            "enum": [
              "PROXY",
              "SELF"
            ],
            "title": "- 본인신청과 대리신청을 구별하는 type",
            "description": "- 본인신청과 대리신청을 구별하는 type.\n- SELF: 본인 신청\n- PROXY: 대리 신청"
          },
          "status": {
            "type": "string",
            "enum": [
              "CANCELED",
              "DELETED",
              "DONE",
              "READY"
            ],
            "title": "- status",
            "description": "- status.\n- READY: 결제 대기중\n- DONE: 결제 완료\n- CANCELED: 결제 취소\n- DELETED: 삭제됨 (DB에는 남아있으나 유저에게 보여지지 않음)"
          },
          "competitionId": {
            "type": "string",
            "title": "- competition id",
            "description": "- competition id."
          },
          "userId": {
            "type": "number",
            "title": "- user id",
            "description": "- user id."
          },
          "playerSnapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPlayerSnapshot"
            },
            "minItems": 1,
            "title": "- player snapshots",
            "description": "- player snapshots."
          },
          "participationDivisionInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IParticipationDivisionInfo"
            },
            "minItems": 1,
            "title": "- participation division infos",
            "description": "- participation division infos."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "type",
          "status",
          "competitionId",
          "userId",
          "playerSnapshots",
          "participationDivisionInfos"
        ]
      },
      "UpdateReadyApplicationReqBody": {
        "type": "object",
        "properties": {
          "participationDivisionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "title": "- Division IDs to participate",
            "description": "- Division IDs to participate."
          },
          "playerSnapshotUpdateDto": {
            "$ref": "#/components/schemas/IPlayerSnapshot.CreateDto"
          }
        },
        "nullable": false,
        "required": [
          "participationDivisionIds",
          "playerSnapshotUpdateDto"
        ]
      },
      "ResponseFormUpdateReadyApplicationRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/UpdateReadyApplicationRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "UpdateReadyApplicationRes": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/IApplication.ModelValue.Ready"
          }
        },
        "nullable": false,
        "required": [
          "application"
        ]
      },
      "UpdateDoneApplicationReqBody": {
        "type": "object",
        "properties": {
          "playerSnapshotUpdateDto": {
            "$ref": "#/components/schemas/IPlayerSnapshot.CreateDto"
          },
          "participationDivisionInfoUpdateDtos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IParticipationDivisionInfo.UpdateDto"
            },
            "minItems": 1,
            "title": "- Division info update data list",
            "description": "- Division info update data list."
          }
        },
        "nullable": false
      },
      "IParticipationDivisionInfo.UpdateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "- 수정하고자 하는 참가부문 정보 ID (식별자)",
            "description": "- 수정하고자 하는 참가부문 정보 ID (식별자)."
          },
          "newParticipationDivisionId": {
            "type": "string",
            "title": "- 새로 참가 하고자 하는 부문 ID",
            "description": "- 새로 참가 하고자 하는 부문 ID."
          }
        },
        "nullable": false,
        "required": [
          "id",
          "newParticipationDivisionId"
        ]
      },
      "ResponseFormUpdateDoneApplicationRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/UpdateDoneApplicationRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "UpdateDoneApplicationRes": {
        "type": "object",
        "properties": {
          "application": {
            "$ref": "#/components/schemas/IApplication.ModelValue.Ready"
          }
        },
        "nullable": false,
        "required": [
          "application"
        ]
      },
      "ResponseFormvoid": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "ResponseFormGetExpectedPaymentRes": {
        "type": "object",
        "properties": {
          "isSuccess": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "code": {
            "type": "number",
            "enum": [
              200
            ]
          },
          "result": {
            "$ref": "#/components/schemas/GetExpectedPaymentRes"
          }
        },
        "nullable": false,
        "required": [
          "isSuccess",
          "code"
        ]
      },
      "GetExpectedPaymentRes": {
        "type": "object",
        "properties": {
          "expectedPayment": {
            "$ref": "#/components/schemas/IExpectedPayment"
          }
        },
        "nullable": false,
        "required": [
          "expectedPayment"
        ]
      },
      "IExpectedPayment": {
        "type": "object",
        "properties": {
          "normalAmount": {
            "type": "number"
          },
          "earlybirdDiscountAmount": {
            "type": "number"
          },
          "combinationDiscountAmount": {
            "type": "number"
          },
          "totalAmount": {
            "type": "number"
          }
        },
        "nullable": false,
        "required": [
          "normalAmount",
          "earlybirdDiscountAmount",
          "combinationDiscountAmount",
          "totalAmount"
        ]
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}