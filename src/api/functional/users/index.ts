/**
 * @packageDocumentation
 * @module api.functional.users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from '@nestia/fetcher';
import { PlainFetcher } from '@nestia/fetcher/lib/PlainFetcher';
import typia from 'typia';

import type { CreateUserDto } from '../../../users/dto/create-user.dto';
import { NestiaSimulator } from '../../utils/NestiaSimulator';

/**
 * 1-1 create user.
 *
 * @tag 1 user
 * @param dto CreateUserDto
 * @returns created user
 *
 * @controller UserController.postUser
 * @path POST /users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function postUser(
  connection: IConnection,
  dto: postUser.Input,
): Promise<postUser.Output> {
  return !!connection.simulate
    ? postUser.simulate(connection, dto)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...(connection.headers ?? {}),
            'Content-Type': 'application/json',
          },
        },
        {
          ...postUser.METADATA,
          path: postUser.path(),
        } as const,
        dto,
      );
}
export namespace postUser {
  export type Input = Primitive<CreateUserDto>;
  export type Output = Primitive<CreateUserDto>;

  export const METADATA = {
    method: 'POST',
    path: '/users',
    request: {
      type: 'application/json',
      encrypted: false,
    },
    response: {
      type: 'application/json',
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (): string => {
    return `/users`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Primitive<CreateUserDto> => typia.random<Primitive<CreateUserDto>>(g);
  export const simulate = async (
    connection: IConnection,
    dto: postUser.Input,
  ): Promise<Output> => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: 'application/json',
    });
    assert.body(() => typia.assert(dto));
    return random(
      typeof connection.simulate === 'object' && connection.simulate !== null
        ? connection.simulate
        : undefined,
    );
  };
}
