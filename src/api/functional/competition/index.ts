/**
 * @packageDocumentation
 * @module api.functional.competition
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

/**
 * @controller CompetitionController.getHello
 * @path GET /competition
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getHello(
    connection: IConnection,
): Promise<getHello.Output> {
    return !!connection.simulate
        ? getHello.simulate(
              connection,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...getHello.METADATA,
                  path: getHello.path(),
              } as const,
          );
}
export namespace getHello {
    export type Output = Primitive<string>;

    export const METADATA = {
        method: "GET",
        path: "/competition",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/competition`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<string> =>
        typia.random<Primitive<string>>(g);
    export const simulate = async (
        connection: IConnection,
    ): Promise<Output> => {
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}